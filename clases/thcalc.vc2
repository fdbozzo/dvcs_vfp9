*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thcalc.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cmcerrar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />

	BackColor = 221,226,222
	BackStyle = 0
	Height = 25
	Name = "cmcerrar"
	SpecialEffect = 0
	Width = 26

	ADD OBJECT 'Image1' AS image WITH ;
		Height = 21, ;
		Left = 2, ;
		Name = "Image1", ;
		Picture = ..\graphics\cerrar114cua.bmp, ;
		Top = 2, ;
		Width = 22
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE Click
		thisform.Release
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.parent.Text14.Value="Cerrar"
	ENDPROC

	PROCEDURE Image1.Click
		thisform.Release
	ENDPROC

	PROCEDURE Image1.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH this.Parent
			.BorderWidth=0
			.Backcolor=.Backcolor
		ENDWITH
		
	ENDPROC

	PROCEDURE Image1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.parent.parent.Text14.Value="Cerrar"
	ENDPROC

	PROCEDURE Image1.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH this.Parent
			.BorderWidth=1
			.Backcolor=.Backcolor
		ENDWITH
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdclose AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = ""
	DisabledPicture = ..\graphics\cerrar114cuan.bmp
	Height = 25
	Name = "cmcerrar"
	Picture = ..\graphics\cerrar114cua.bmp
	Width = 26
	
	PROCEDURE Click
		Thisform.Release
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmg AS commandgroup 
 	*< CLASSDATA: Baseclass="commandgroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: putraya
	*</DefinedPropArrayMethod>

	BackColor = 221,226,222
	ButtonCount = 2
	Height = 30
	Name = "cmg"
	Value = 1
	Width = 131
	Command1.Caption = "\<Aceptar"
	Command1.FontSize = 8
	Command1.Height = 22
	Command1.Left = 4
	Command1.Name = "Command1"
	Command1.Top = 4
	Command1.Width = 60
	Command2.Caption = "\<Cancelar"
	Command2.FontSize = 8
	Command2.Height = 22
	Command2.Left = 65
	Command2.Name = "Command2"
	Command2.Top = 4
	Command2.Width = 62
	
	PROCEDURE Init
		IF !PEMSTATUS(thisform,"gCalcu1",5)
			IF PEMSTATUS(_screen,"classDir",5)
				thisform.NewObject("gCalcu1","gCalcu",LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"))
			ELSE
				thisform.NewObject("gCalcu1","gCalcu","thcalc")
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE putraya
		LPARAMETERS xObjeto
		LOCAL lntop,lnLeft,lnWid,lnHei
		IF PCOUNT()=0
			Thisform.imr2.visible=.f.
		   RETURN 
		ENDIF
		lnTop=OBJTOCLIENT(xObjeto,1)
		lnLeft=OBJTOCLIENT(xObjeto,2)
		lnWid=OBJTOCLIENT(xObjeto,3)
		lnHei=OBJTOCLIENT(xObjeto,4)
		IF !PEMSTATUS(thisform,"imr2",5)
			IF PEMSTATUS(_screen,"classDir",5)
				thisform.NewObject("imr2","Imaraya",LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"))
			ELSE
				thisform.NewObject("imr2","Imaraya","thcalc")
			ENDIF
		ENDIF
		
		With thisform.imr2
			.visible=.t.
			.left=lnLeft+This.ThCentrar(lnwid,.width)
			.top=lnTop+lnHei
		ENDWITH
		
	ENDPROC

	PROCEDURE Command1.GotFocus
		thisform.gCalcu1.PutRaya(this)
	ENDPROC

	PROCEDURE Command1.LostFocus
		thisform.gcalcu1.putraya()
	ENDPROC

	PROCEDURE Command2.GotFocus
		thisform.gCalcu1.PutRaya(this)
	ENDPROC

	PROCEDURE Command2.LostFocus
		thisform.gCalcu1.PutRaya()
	ENDPROC

ENDDEFINE

DEFINE CLASS cntcalcu AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdUpDecim" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDownDecim" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TxDezim" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmNum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmBas" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CntFun" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CntFun.lbcuad" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CntFun.lbcod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CntFun.LbDevol" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmBorrope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmDevol" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmTakas" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmClip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmTake" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmabre" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmCierra" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmChar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmDelEntry" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmRecalc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Check1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmRaiz" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pbot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla.Column2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla.Column3.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grilla.Column4.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmDelParen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container5.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container2.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container7.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container3.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container4.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container6.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmMenos" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmMas" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MemRes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmSumEn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmEntry" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmResEn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TxMem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Check2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MemClin" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmCerrar1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: acomoda
		*m: agrega
		*m: detmask
		*m: fonlydigit
		*m: formublok
		*m: getdevol
		*m: getfopen
		*m: getgrilla
		*m: getvalform
		*m: getvaltag
		*m: greenlines
		*m: grgotfocus
		*m: grlostfocus
		*m: gstandar
		*m: limpiar
		*m: micurdir
		*m: opera
		*m: opermat
		*m: putdecimal
		*m: putparen
		*m: putraya
		*m: puttag
		*m: qitparen
		*m: quitacar
		*m: quitentra
		*m: readcust
		*m: reopera
		*m: savecust
		*m: separtext
		*m: showerror
		*m: teldecim
		*m: thcentrar
		*m: widgrid
		*m: wokupas
		*m: _getcalc
		*p: acum
		*p: cadena
		*p: cancelop
		*p: confstat
		*p: dezimac
		*p: estirar
		*p: formcall
		*p: memoria1
		*p: metodo
		*p: ndezim
		*p: nitem
		*p: npacie
		*p: nparen
		*p: numero
		*p: numforma
		*p: numspa
		*p: objref
		*p: olddecimal
		*p: plista
		*p: psolve1
		*p: psolve2
		*p: psolve3
		*p: rcparen
		*p: savedezim
		*p: signo
		*p: stparen
		*p: tooltake
		*a: adevol[25,0]
		*a: adoble[16,0]
		*a: ateclop[5,2]
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Height = 340
	Name = "cntcalcu"
	Width = 452

	ADD OBJECT 'Check1' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		DownPicture = ..\graphics\achica1.bmp, ;
		Height = 25, ;
		Left = 309, ;
		Name = "Check1", ;
		Picture = ..\graphics\agranda1.bmp, ;
		Style = 1, ;
		TabIndex = 12, ;
		ToolTipText = "Estirar ó Acortar formulario.", ;
		Top = 255, ;
		Value = .F., ;
		Width = 26
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Check2' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Limpiar", ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 10, ;
		Name = "Check2", ;
		ReadOnly = .F., ;
		TabIndex = 38, ;
		Top = 191, ;
		Width = 52
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Cmabre' AS commandbutton WITH ;
		BackColor = 220,228,224, ;
		Caption = "", ;
		DisabledPicture = ..\graphics\scorchabren.bmp, ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 167, ;
		Name = "Cmabre", ;
		Picture = ..\graphics\scorchabre.bmp, ;
		TabIndex = 4, ;
		ToolTipText = "Abrir paréntesis.", ;
		Top = 94, ;
		Width = 15
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmBas' AS commandgroup WITH ;
		BackColor = 201,210,211, ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		ButtonCount = 4, ;
		Height = 92, ;
		Left = 75, ;
		Name = "CmBas", ;
		TabIndex = 2, ;
		Top = 62, ;
		Value = 1, ;
		Visible = .T., ;
		Width = 27, ;
		Command1.Caption = "", ;
		Command1.Height = 22, ;
		Command1.Left = 1, ;
		Command1.Name = "Command1", ;
		Command1.Picture = ..\graphics\smas.bmp, ;
		Command1.ToolTipText = "Más", ;
		Command1.Top = 2, ;
		Command1.Width = 24, ;
		Command2.Caption = "", ;
		Command2.Height = 22, ;
		Command2.Left = 1, ;
		Command2.Name = "Command2", ;
		Command2.Picture = ..\graphics\smenos.bmp, ;
		Command2.ToolTipText = "Menos", ;
		Command2.Top = 24, ;
		Command2.Width = 24, ;
		Command3.Caption = "", ;
		Command3.Height = 22, ;
		Command3.Left = 1, ;
		Command3.Name = "Command3", ;
		Command3.Picture = ..\graphics\smulti.bmp, ;
		Command3.ToolTipText = "Por (multiplica)", ;
		Command3.Top = 46, ;
		Command3.Width = 24, ;
		Command4.Caption = "", ;
		Command4.FontSize = 8, ;
		Command4.Height = 22, ;
		Command4.Left = 1, ;
		Command4.Name = "Command4", ;
		Command4.Picture = ..\graphics\sdivide.bmp, ;
		Command4.ToolTipText = "dividido", ;
		Command4.Top = 68, ;
		Command4.Width = 24
		*< END OBJECT: BaseClass="commandgroup" />

	ADD OBJECT 'CmBorrope' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\destroy3bmn.bmp, ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 168, ;
		Name = "CmBorrope", ;
		Picture = ..\graphics\destroy3bm.bmp, ;
		TabIndex = 11, ;
		ToolTipText = "Borrar la operación.", ;
		Top = 124, ;
		Width = 28
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmCerrar1' AS cmcerrar WITH ;
		Left = 363, ;
		Name = "CmCerrar1", ;
		Top = 261, ;
		Image1.Height = 21, ;
		Image1.Name = "Image1", ;
		Image1.Width = 22
		*< END OBJECT: ClassLib="thcalc.vcx" BaseClass="container" />

	ADD OBJECT 'CmChar' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\flechared31bn.bmp, ;
		Height = 22, ;
		Left = 107, ;
		Name = "CmChar", ;
		Picture = ..\graphics\flechared31b.bmp, ;
		TabIndex = 42, ;
		Top = 64, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmCierra' AS commandbutton WITH ;
		BackColor = 220,228,224, ;
		Caption = "", ;
		DisabledPicture = ..\graphics\scorcierran.bmp, ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 183, ;
		Name = "CmCierra", ;
		Picture = ..\graphics\scorcierra.bmp, ;
		TabIndex = 5, ;
		ToolTipText = "Cerrar paréntesis.", ;
		Top = 94, ;
		Width = 14
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmClip' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\clipsendn.bmp, ;
		Height = 24, ;
		Left = 135, ;
		Name = "CmClip", ;
		Picture = ..\graphics\clipsend.bmp, ;
		TabIndex = 8, ;
		ToolTipText = "Enviar al PortaPapeles (Copiar)", ;
		Top = 93, ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdDownDecim' AS commandbutton WITH ;
		BackColor = 220,228,224, ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 19, ;
		Left = 45, ;
		Name = "cmdDownDecim", ;
		Picture = ..\graphics\fleabajo.bmp, ;
		TabIndex = 16, ;
		ToolTipText = "Reducir decimales.", ;
		Top = 36, ;
		Width = 15
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmDelEntry' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\destroy4bmn.bmp, ;
		Height = 22, ;
		Left = 132, ;
		Name = "CmDelEntry", ;
		Picture = ..\graphics\destroy4bm.bmp, ;
		TabIndex = 43, ;
		Top = 64, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmDelParen' AS commandbutton WITH ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 175, ;
		Name = "CmDelParen", ;
		Picture = ..\graphics\destroy5m.bmp, ;
		TabIndex = 6, ;
		ToolTipText = "Eliminar este paréntesis.", ;
		Top = 227, ;
		Width = 22
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmDevol' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\basgfle41n.bmp, ;
		Height = 24, ;
		Left = 135, ;
		Name = "CmDevol", ;
		Picture = ..\graphics\basgfle41.bmp, ;
		TabIndex = 10, ;
		ToolTipText = "Enviar al PortaPapeles (Copiar) ", ;
		Top = 123, ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdUpDecim' AS commandbutton WITH ;
		BackColor = 220,228,224, ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 19, ;
		Left = 30, ;
		Name = "cmdUpDecim", ;
		Picture = ..\graphics\flearriba.bmp, ;
		TabIndex = 15, ;
		ToolTipText = "Aumentar decimales.", ;
		Top = 36, ;
		Width = 15
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmEntry' AS commandbutton WITH ;
		BackColor = 242,247,243, ;
		Caption = "E", ;
		FontBold = .T., ;
		ForeColor = 0,64,128, ;
		Height = 19, ;
		Left = 5, ;
		Name = "CmEntry", ;
		TabIndex = 19, ;
		ToolTipText = "Guardar en memoria.", ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmMas' AS commandbutton WITH ;
		BackColor = 242,247,243, ;
		Caption = "M+", ;
		FontBold = .T., ;
		ForeColor = 73,136,160, ;
		Height = 19, ;
		Left = 86, ;
		Name = "CmMas", ;
		TabIndex = 20, ;
		ToolTipText = "Sumar a la memoria.", ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmMenos' AS commandbutton WITH ;
		BackColor = 242,247,243, ;
		Caption = "M-", ;
		FontBold = .T., ;
		ForeColor = 250,105,69, ;
		Height = 19, ;
		Left = 113, ;
		Name = "CmMenos", ;
		TabIndex = 21, ;
		ToolTipText = "Restar a la memoria.", ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmNum' AS commandgroup WITH ;
		BackColor = 232,233,228, ;
		BackStyle = 1, ;
		ButtonCount = 12, ;
		Height = 96, ;
		Left = 1, ;
		Name = "CmNum", ;
		TabIndex = 3, ;
		Top = 60, ;
		Value = 1, ;
		Width = 103, ;
		Command1.Caption = "7", ;
		Command1.Height = 22, ;
		Command1.Left = 4, ;
		Command1.Name = "Command1", ;
		Command1.Top = 4, ;
		Command1.Width = 23, ;
		Command10.Caption = ".", ;
		Command10.FontBold = .T., ;
		Command10.FontSize = 14, ;
		Command10.Height = 22, ;
		Command10.Left = 4, ;
		Command10.Name = "Command10", ;
		Command10.Top = 70, ;
		Command10.Width = 23, ;
		Command11.Caption = "0", ;
		Command11.Height = 22, ;
		Command11.Left = 27, ;
		Command11.Name = "Command11", ;
		Command11.Top = 70, ;
		Command11.Width = 23, ;
		Command12.BackColor = 220,228,224, ;
		Command12.Caption = "", ;
		Command12.DisabledBackColor = 231,237,234, ;
		Command12.DisabledPicture = ..\graphics\smasomn.bmp, ;
		Command12.Enabled = .F., ;
		Command12.Height = 22, ;
		Command12.Left = 50, ;
		Command12.Name = "Command12", ;
		Command12.Picture = ..\graphics\smasom.bmp, ;
		Command12.Top = 70, ;
		Command12.Width = 23, ;
		Command2.Caption = "8", ;
		Command2.Height = 22, ;
		Command2.Left = 27, ;
		Command2.Name = "Command2", ;
		Command2.Top = 4, ;
		Command2.Width = 23, ;
		Command3.Caption = "9", ;
		Command3.Height = 22, ;
		Command3.Left = 50, ;
		Command3.Name = "Command3", ;
		Command3.Top = 4, ;
		Command3.Width = 23, ;
		Command4.Caption = "4", ;
		Command4.Height = 22, ;
		Command4.Left = 4, ;
		Command4.Name = "Command4", ;
		Command4.Top = 26, ;
		Command4.Width = 23, ;
		Command5.Caption = "5", ;
		Command5.Height = 22, ;
		Command5.Left = 27, ;
		Command5.Name = "Command5", ;
		Command5.Top = 26, ;
		Command5.Width = 23, ;
		Command6.Caption = "6", ;
		Command6.Height = 22, ;
		Command6.Left = 50, ;
		Command6.Name = "Command6", ;
		Command6.Top = 26, ;
		Command6.Width = 23, ;
		Command7.Caption = "1", ;
		Command7.Height = 22, ;
		Command7.Left = 4, ;
		Command7.Name = "Command7", ;
		Command7.Top = 48, ;
		Command7.Width = 23, ;
		Command8.Caption = "2", ;
		Command8.Height = 22, ;
		Command8.Left = 27, ;
		Command8.Name = "Command8", ;
		Command8.Top = 48, ;
		Command8.Width = 23, ;
		Command9.Caption = "3", ;
		Command9.Height = 22, ;
		Command9.Left = 50, ;
		Command9.Name = "Command9", ;
		Command9.Top = 48, ;
		Command9.Width = 23
		*< END OBJECT: BaseClass="commandgroup" />

	ADD OBJECT 'CmRaiz' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\raiz2n.bmp, ;
		Enabled = .F., ;
		ForeColor = 0,0,255, ;
		Height = 25, ;
		Left = 201, ;
		Name = "CmRaiz", ;
		Picture = ..\graphics\raiz2.bmp, ;
		TabIndex = 22, ;
		ToolTipText = "Incluir Resultado Memoria en el cálculo.", ;
		Top = 252, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmRecalc' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\calcula1n.bmp, ;
		Height = 22, ;
		Left = 157, ;
		Name = "CmRecalc", ;
		Picture = ..\graphics\calcula1.bmp, ;
		TabIndex = 44, ;
		Top = 64, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmResEn' AS commandbutton WITH ;
		BackColor = 242,247,243, ;
		Caption = "E-", ;
		FontBold = .T., ;
		ForeColor = 250,105,69, ;
		Height = 19, ;
		Left = 59, ;
		Name = "CmResEn", ;
		TabIndex = 18, ;
		ToolTipText = "Guardar en memoria.", ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmSumEn' AS commandbutton WITH ;
		BackColor = 242,247,243, ;
		Caption = "E+", ;
		FontBold = .T., ;
		ForeColor = 73,136,160, ;
		Height = 19, ;
		Left = 32, ;
		Name = "CmSumEn", ;
		TabIndex = 17, ;
		ToolTipText = "Guardar en memoria.", ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmTakas' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\basgfle31mirn.bmp, ;
		Height = 24, ;
		Left = 108, ;
		Name = "CmTakas", ;
		Picture = ..\graphics\basgfle31mir.bmp, ;
		TabIndex = 9, ;
		ToolTipText = "Descargar del portapapeles (Pegar)", ;
		Top = 123, ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CmTake' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\cliptaken.bmp, ;
		Height = 24, ;
		Left = 108, ;
		Name = "CmTake", ;
		Picture = ..\graphics\cliptake.bmp, ;
		TabIndex = 7, ;
		ToolTipText = "Descargar del portapapeles (Pegar)", ;
		Top = 93, ;
		Width = 26
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CntFun' AS container WITH ;
		BackColor = 255,247,230, ;
		BorderColor = 255,150,45, ;
		Height = 29, ;
		Left = 1, ;
		Name = "CntFun", ;
		TabIndex = 41, ;
		Top = 261, ;
		Width = 194
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'CntFun.lbcod' AS label WITH ;
		BackStyle = 0, ;
		Caption = "[F8]=Limpiar", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 14, ;
		Left = 105, ;
		Name = "lbcod", ;
		Top = 1, ;
		Width = 62
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'CntFun.lbcuad' AS label WITH ;
		BackStyle = 0, ;
		Caption = "[F5]=Borra Entrada", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 14, ;
		Left = 5, ;
		Name = "lbcuad", ;
		Top = 1, ;
		Width = 94
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'CntFun.LbDevol' AS label WITH ;
		BackStyle = 0, ;
		Caption = "[F12] ó [Z]=Devolver Resultado", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 14, ;
		Left = 5, ;
		Name = "LbDevol", ;
		Top = 18, ;
		Width = 153
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Container1' AS container WITH ;
		BackColor = 189,200,202, ;
		BackStyle = 1, ;
		BorderColor = 255,247,230, ;
		BorderWidth = 1, ;
		Height = 19, ;
		Left = 167, ;
		Name = "Container1", ;
		SpecialEffect = 2, ;
		TabIndex = 51, ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Container1.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "MC", ;
		FontBold = .T., ;
		ForeColor = 255,128,128, ;
		Height = 17, ;
		Left = 4, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Container2' AS container WITH ;
		BackColor = 189,200,202, ;
		BackStyle = 1, ;
		BorderColor = 255,247,230, ;
		BorderWidth = 1, ;
		Height = 19, ;
		Left = 32, ;
		Name = "Container2", ;
		SpecialEffect = 2, ;
		TabIndex = 47, ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Container2.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "E+", ;
		FontBold = .T., ;
		ForeColor = 96,96,96, ;
		Height = 17, ;
		Left = 6, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 16
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Container3' AS container WITH ;
		BackColor = 189,200,202, ;
		BackStyle = 1, ;
		BorderColor = 255,247,230, ;
		BorderWidth = 1, ;
		Height = 19, ;
		Left = 86, ;
		Name = "Container3", ;
		SpecialEffect = 2, ;
		TabIndex = 49, ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Container3.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "M+", ;
		FontBold = .T., ;
		ForeColor = 0,176,176, ;
		Height = 17, ;
		Left = 5, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 19
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Container4' AS container WITH ;
		BackColor = 189,200,202, ;
		BackStyle = 1, ;
		BorderColor = 255,247,230, ;
		BorderWidth = 1, ;
		Height = 19, ;
		Left = 113, ;
		Name = "Container4", ;
		SpecialEffect = 2, ;
		TabIndex = 50, ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Container4.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "M-", ;
		FontBold = .T., ;
		ForeColor = 255,128,128, ;
		Height = 17, ;
		Left = 6, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 16
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Container5' AS container WITH ;
		BackColor = 189,200,202, ;
		BackStyle = 1, ;
		BorderColor = 255,247,230, ;
		BorderWidth = 1, ;
		Height = 19, ;
		Left = 5, ;
		Name = "Container5", ;
		SpecialEffect = 2, ;
		TabIndex = 45, ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Container5.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "E", ;
		FontBold = .T., ;
		ForeColor = 96,96,96, ;
		Height = 17, ;
		Left = 9, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 9
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Container6' AS container WITH ;
		BackColor = 189,200,202, ;
		BackStyle = 1, ;
		BorderColor = 255,247,230, ;
		BorderWidth = 1, ;
		Height = 19, ;
		Left = 140, ;
		Name = "Container6", ;
		SpecialEffect = 2, ;
		TabIndex = 51, ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Container6.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "MR", ;
		FontBold = .T., ;
		ForeColor = 48,138,165, ;
		Height = 17, ;
		Left = 4, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Container7' AS container WITH ;
		BackColor = 189,200,202, ;
		BackStyle = 1, ;
		BorderColor = 255,247,230, ;
		BorderWidth = 1, ;
		Height = 19, ;
		Left = 59, ;
		Name = "Container7", ;
		SpecialEffect = 2, ;
		TabIndex = 48, ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Container7.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "E-", ;
		FontBold = .T., ;
		ForeColor = 96,96,96, ;
		Height = 17, ;
		Left = 7, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 13
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Grilla' AS grid WITH ;
		AllowCellSelection = .F., ;
		ColumnCount = 4, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 239, ;
		Left = 204, ;
		Name = "Grilla", ;
		RecordMark = .F., ;
		RowHeight = 17, ;
		ScrollBars = 2, ;
		Top = 4, ;
		Width = 210, ;
		Column1.Name = "Column1", ;
		Column2.Name = "Column2", ;
		Column3.Name = "Column3", ;
		Column4.Name = "Column4"
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'Grilla.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grilla.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grilla.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grilla.Column2.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grilla.Column3.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grilla.Column3.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grilla.Column4.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grilla.Column4.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Image10' AS image WITH ;
		BackStyle = 0, ;
		Height = 15, ;
		Left = 134, ;
		Name = "Image10", ;
		Picture = ..\graphics\destroy5m.bmp, ;
		Top = 68, ;
		Width = 17
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image11' AS image WITH ;
		BackStyle = 0, ;
		Height = 17, ;
		Left = 158, ;
		Name = "Image11", ;
		Picture = ..\graphics\calcula1n.bmp, ;
		Top = 66, ;
		Width = 20
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image2' AS image WITH ;
		Height = 17, ;
		Left = 172, ;
		Name = "Image2", ;
		Picture = ..\graphics\destroy3bmn.bmp, ;
		Top = 126, ;
		Width = 19
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image3' AS image WITH ;
		Height = 17, ;
		Left = 110, ;
		Name = "Image3", ;
		Picture = ..\graphics\basgfle31mirn.bmp, ;
		Top = 126, ;
		Width = 20
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image4' AS image WITH ;
		Height = 17, ;
		Left = 137, ;
		Name = "Image4", ;
		Picture = ..\graphics\basgfle41n.bmp, ;
		Top = 126, ;
		Width = 20
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image5' AS image WITH ;
		BackStyle = 0, ;
		Height = 19, ;
		Left = 110, ;
		Name = "Image5", ;
		Picture = ..\graphics\cliptaken.bmp, ;
		Top = 96, ;
		Width = 20
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image6' AS image WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 19, ;
		Left = 136, ;
		Name = "Image6", ;
		Picture = ..\graphics\clipsendn.bmp, ;
		Top = 96, ;
		Width = 20
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image7' AS image WITH ;
		BackStyle = 0, ;
		BorderColor = 114,136,141, ;
		Height = 18, ;
		Left = 166, ;
		Name = "Image7", ;
		Picture = ..\graphics\scorchabren.bmp, ;
		Top = 96, ;
		Width = 18
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image8' AS image WITH ;
		BackStyle = 0, ;
		BorderColor = 114,136,141, ;
		Height = 18, ;
		Left = 181, ;
		Name = "Image8", ;
		Picture = ..\graphics\scorcierran.bmp, ;
		Top = 96, ;
		Width = 18
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Image9' AS image WITH ;
		BackStyle = 0, ;
		Height = 13, ;
		Left = 111, ;
		Name = "Image9", ;
		Picture = ..\graphics\flechared31b.bmp, ;
		Top = 68, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Items:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 243, ;
		Name = "Label1", ;
		TabIndex = 52, ;
		Top = 260, ;
		Width = 30
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Total:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 74, ;
		Name = "Label2", ;
		TabIndex = 46, ;
		Top = 192, ;
		Width = 28
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'MemClin' AS commandbutton WITH ;
		BackColor = 242,247,243, ;
		Caption = "MC", ;
		ForeColor = 255,0,0, ;
		Height = 19, ;
		Left = 167, ;
		Name = "MemClin", ;
		TabIndex = 22, ;
		ToolTipText = "Limpiar Memoria", ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'MemRes' AS commandbutton WITH ;
		BackColor = 242,247,243, ;
		Caption = "MR", ;
		ForeColor = 0,0,255, ;
		Height = 19, ;
		Left = 140, ;
		Name = "MemRes", ;
		TabIndex = 22, ;
		ToolTipText = "Incluir Resultado Memoria en el cálculo.", ;
		Top = 163, ;
		Width = 27
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pbot' AS commandbutton WITH ;
		AutoSize = .T., ;
		Caption = "pbot", ;
		FontSize = 8, ;
		Height = 25, ;
		Left = 402, ;
		Name = "pbot", ;
		TabIndex = 1, ;
		Top = 264, ;
		Width = 37
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 221,226,222, ;
		Height = 29, ;
		Left = 1, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 31, ;
		Width = 63
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape10' AS shape WITH ;
		BackColor = 221,226,227, ;
		Height = 30, ;
		Left = 104, ;
		Name = "Shape10", ;
		SpecialEffect = 0, ;
		Top = 60, ;
		Width = 82
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape11' AS shape WITH ;
		BackColor = 231,237,234, ;
		BorderColor = 114,136,141, ;
		Height = 20, ;
		Left = 6, ;
		Name = "Shape11", ;
		Top = 189, ;
		Width = 117
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackColor = 221,226,222, ;
		Height = 29, ;
		Left = 64, ;
		Name = "Shape2", ;
		SpecialEffect = 0, ;
		Top = 31, ;
		Width = 136
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape3' AS shape WITH ;
		BackColor = 221,226,222, ;
		Height = 249, ;
		Left = 200, ;
		Name = "Shape3", ;
		SpecialEffect = 0, ;
		Top = 1, ;
		Width = 219
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape4' AS shape WITH ;
		BackColor = 221,226,222, ;
		Height = 30, ;
		Left = 1, ;
		Name = "Shape4", ;
		SpecialEffect = 0, ;
		Top = 1, ;
		Width = 199
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape5' AS shape WITH ;
		BackColor = 201,210,211, ;
		Height = 30, ;
		Left = 164, ;
		Name = "Shape5", ;
		SpecialEffect = 0, ;
		Top = 120, ;
		Width = 36
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape6' AS shape WITH ;
		BackColor = 201,210,211, ;
		Height = 30, ;
		Left = 104, ;
		Name = "Shape6", ;
		SpecialEffect = 0, ;
		Top = 90, ;
		Width = 60
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape7' AS shape WITH ;
		BackColor = 221,226,222, ;
		Height = 58, ;
		Left = 1, ;
		Name = "Shape7", ;
		SpecialEffect = 0, ;
		Top = 156, ;
		Width = 199
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape8' AS shape WITH ;
		BackColor = 201,210,211, ;
		Height = 30, ;
		Left = 104, ;
		Name = "Shape8", ;
		SpecialEffect = 0, ;
		Top = 120, ;
		Width = 60
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape9' AS shape WITH ;
		BackColor = 201,210,211, ;
		Height = 30, ;
		Left = 164, ;
		Name = "Shape9", ;
		SpecialEffect = 0, ;
		Top = 90, ;
		Width = 36
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Text1' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 114,136,141, ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 21, ;
		InputMask = "9,999,999,999.99", ;
		Left = 29, ;
		Name = "Text1", ;
		SpecialEffect = 1, ;
		TabIndex = 25, ;
		ToolTipText = "Valor ingresado.", ;
		Top = 5, ;
		Value = 0, ;
		Width = 167
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Text10' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 73,136,160, ;
		DisabledBackColor = 255,247,230, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = "99,999.9", ;
		Left = 104, ;
		Name = "Text10", ;
		SpecialEffect = 1, ;
		TabIndex = 26, ;
		Top = 303, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 71
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Text11' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 73,136,160, ;
		DisabledBackColor = 255,247,230, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = "999,999.99", ;
		Left = 139, ;
		Name = "Text11", ;
		SpecialEffect = 1, ;
		TabIndex = 30, ;
		Top = 304, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 82
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Text14' AS editbox WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 2, ;
		Name = "Text14", ;
		ScrollBars = 0, ;
		SpecialEffect = 1, ;
		TabIndex = 36, ;
		Top = 249, ;
		Width = 221
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Text2' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 114,136,141, ;
		DisabledBackColor = 255,247,230, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 68, ;
		Name = "Text2", ;
		SpecialEffect = 1, ;
		TabIndex = 32, ;
		ToolTipText = "Resultado de la operación.", ;
		Top = 35, ;
		Value = 0, ;
		Width = 127
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Text3' AS textbox WITH ;
		Alignment = 2, ;
		BorderColor = 114,136,141, ;
		DisabledBackColor = 255,247,230, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		FontSize = 10, ;
		Height = 21, ;
		Left = 5, ;
		MaxLength = 1, ;
		Name = "Text3", ;
		SpecialEffect = 1, ;
		TabIndex = 33, ;
		ToolTipText = "Operación aritmética", ;
		Top = 5, ;
		Width = 23
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Text6' AS editbox WITH ;
		BorderColor = 114,136,141, ;
		DisabledBackColor = 255,251,242, ;
		DisabledForeColor = 0,0,0, ;
		FontSize = 8, ;
		Height = 37, ;
		Left = 2, ;
		Name = "Text6", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		SpecialEffect = 1, ;
		TabIndex = 37, ;
		ToolTipText = "Datos ingresados entre corchetes.", ;
		Top = 214, ;
		Width = 197
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Text7' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 73,136,160, ;
		DisabledBackColor = 255,247,230, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 62, ;
		Name = "Text7", ;
		SpecialEffect = 1, ;
		TabIndex = 27, ;
		Top = 304, ;
		Visible = .F., ;
		Width = 43
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Text8' AS textbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		BorderColor = 73,136,160, ;
		BorderStyle = 0, ;
		DisabledBackColor = 255,247,230, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999", ;
		Left = 275, ;
		Name = "Text8", ;
		SpecialEffect = 1, ;
		TabIndex = 24, ;
		ToolTipText = "Valor en Memoria", ;
		Top = 258, ;
		Value = 0, ;
		Width = 30
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Text9' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 73,136,160, ;
		DisabledBackColor = 255,247,230, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = "99", ;
		Left = 23, ;
		Name = "Text9", ;
		SpecialEffect = 1, ;
		TabIndex = 31, ;
		Top = 304, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 42
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'TxDezim' AS textbox WITH ;
		BorderColor = 114,136,141, ;
		DisabledBackColor = 255,247,230, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 5, ;
		MaxLength = 1, ;
		Name = "TxDezim", ;
		SpecialEffect = 1, ;
		TabIndex = 34, ;
		ToolTipText = "Cantidad de Decimales", ;
		Top = 35, ;
		Width = 24
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'TxMem' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 114,136,141, ;
		DisabledBackColor = 242,247,243, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999,999.99", ;
		Left = 105, ;
		Name = "TxMem", ;
		SpecialEffect = 1, ;
		TabIndex = 35, ;
		ToolTipText = "Valor en Memoria", ;
		Top = 189, ;
		Value = 0, ;
		Width = 90
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE acomoda
		Lparameters lChek
		
		lCmDevol=IIF(!ISNULL(this.FormCall).and.!ISNULL(this.objref),.t.,.f.)
		This.formublok(.f.)
		with This.cntfun
			.lbdevol.Visible=lCmDevol
			if lchek
				
				.lbcod.left=.lbcuad.left+.lbcuad.width+10
				.lbcod.Top=.lbcuad.top
				if lCmDevol
					.lbdevol.left=.lbcuad.left
					.lbdevol.top=.lbcod.top+.lbcod.Height
				endif
				.Height=iif(!lCmDevol,.lbcuad.top*2+.lbcuad.Height,;
					.lbcuad.top+.lbDevol.top+.lbdevol.Height)
				.width=.lbcuad.left+.lbcod.left+.lbcod.width
				*	+iif(lCmDEvol,.lbDevol.Width,0)
			else
				.lbcod.left=.lbcuad.left
				.lbcod.Top=.lbcuad.top+.lbcuad.height
				if lCmDevol
					.lbDevol.Left=.lbcuad.left
					.lbDevol.Top=.LbCod.Top+.LbCod.Height
				endif
				.Height=iif(lCmDevol,.LbDevol.Top+.lbDevol.Height,;
					.lbcuad.top+.lbcod.top+.lbcod.Height)
				.width=iif(!lCmDevol,.lbcuad.left*2+.lbcuad.width,;
					.LbDevol.left*2+.LbDevol.width)
			endif
		ENDWITH
		
		
		WITH this
			.Width=iif(lChek,.Shape4.left+.Shape3.Left+.shape3.Width,;
				.Shape4.left*2+.Shape4.width)
		
			.text14.visible=lchek
			.Shape3.Height=.Grilla.Height+8
			.Grilla.Visible=lchek
			
			.Shape3.Visible=lchek
			.Height=.Shape3.Top+.Shape3.height+32
			.cmCerrar1.Left=.width-28
			.cmCerrar1.Top=.height-28
			.Check1.Left=.cmCerrar1.left-28
			.Check1.Top=.cmCerrar1.top+1
			.Check1.tooltiptext=iif(lChek,"Ocultar el cuadro de valores entrados.",;
				"Mostrar el cuadro de valores entrados.")
			.CntFun.top=.Height-.Cntfun.Height-1
			.Text14.top=.CntFun.top-.Text14.Height
			.pbot.left=.width+80
			.pbot.height=.Height+80
			.cmRaiz.left=.width+80
			.CmRaiz.top=.Height+80
		*	.Line1.left=.Grilla.Left
		*	.line2.left=.Grilla.left+.Grilla.Width-1
		
		ENDWITH
		This.formublok(.f.)
		WITH thisform
			.Width=this.Width+1
			.Height=this.Height+1
			.MaxHeight=.Height
			.MaxWidth=.width
		ENDWITH
		
		this.greenlines(This.grilla)
		this.formublok(.t.)
		
	ENDPROC

	PROCEDURE agrega
		lparameters xcnValor,xlfoco
		Thc_nv=Val(xcnValor)
		Thc_ndz=This.Parent.ndezim
		Thc_ncd=10^Thc_ndz
		with this
			if .dezimac
				nLenCadena=Len(.Cadena)
				nAtpunto=At(".",.cadena)
				Thc_cColdec=Substr(.Cadena,nAtpunto+1)
				if empty(Thc_cColdec)
					Thc_nde=10
					*Thc_nadd=Thc_nv*10^(Thc_ndz-1)
					Thc_nadd=Thc_nv
					*Thc_ncd
				
				else
					Thc_nde=10^(Len(Thc_cColdec)+1)
					Thc_nColdec=Val(Thc_cColdec)
					Thc_nadd=Thc_nColdec*10+Thc_nv
				
				
				endif
				.Numero=Int(.Numero)+ Thc_nadd/Thc_nde
			else
				.numero=.Numero*10+Thc_nv
				
			endif
			.Cadena=.cadena+xcnValor
			.Text1.Value=.numero
			.text7.refresh
			.text9.value=len(.cadena)	
		*	if xlfoco
		*		.TExt4.Setfocus
		*	endif
		endwith
	ENDPROC

	PROCEDURE detmask
		lparameters nAncho,nDecimal,xrancho,xnLim
		********************************
		* Determina la composición de una
		* máscara de formato numérico
		* xRancho se utiliza para devolver la 
		* cantidad de caracteres del formato
		* p.e.:
		* lnformaLen=0
		* This.DetMask(12,2,@LnFormaLen)
		* ?lnFormaLen
		********************************
		LOCAL cFormato,i_,nResto,nRep,nlen,cdec
		IF VARTYPE(nAncho)#"N"
			nAncho=12
		ENDIF
		IF VARTYPE(nDecimal)#"N"
			nDecimal=2
		ENDIF
		
		if vartype(xnLim)#"N" OR Empty(xnLim)
			xnLim=14
		endif
		if nAncho>xnLim
			nAncho=xnLim
		endif
		cFormato=""
		xRancho=0
		if nDecimal>0
			wAncho=nAncho-(nDecimal+1)
		else
			wAncho=nAncho
		endif
		
		nResto= Mod(wAncho,3)
		if nREsto=0
			nrep=wAncho/3
			*xCar=Repli("9",nrep)
			For i_=1 to nRep
				if i_<nRep
					cFormato=cFormato+"999,"
				else
					cFormato=cFormato+"999"
				endif
			next
		else
			wAncho=wAncho-nResto
			nrep=wAncho/3
			cFormato=Repli("9",nResto)+","
			For i_=1 to nRep
				if i_<nRep
					cFormato=cFormato+"999,"
				else
					cFormato=cFormato+"999"
				endif
			next
		endif
		
		IF RIGHT(cFormato,1)=","
			cFormato=LEFT(cFormato,LEN(cFormato)-1)
		ENDIF
		
		if nDecimal>0
			cDec=Repli("9",nDEcimal)
			cFormato=cFormato+"."+cDec
		endif
		xRancho=Len(cFormato)
		return cFormato
		
	ENDPROC

	PROCEDURE fonlydigit
		lparameters xlcCadena,xcExcep
		******************************
		** Luis María Guayan
		** Devuelve únicamente los números que contiene una cadena
		LOCAL lcCompare
		IF VARTYPE(xcExcep)#"C"
			xcExcep=""
		ENDIF
		lcCompare="1234567890"+xcExcep
		return CHRTRAN(xlcCadena,CHRTRAN(xlcCadena,lcCompare,""),"")
	ENDPROC

	PROCEDURE formublok
		lparameters xlFija
		with thisform
			.MaxWidth=iif(xlFija,.Width,-1)
			.MinWidth=iif(xlFija,.Width,-1)
			.MaxHeight=iif(xlFija,.Height,-1)
			.MinHeight=iif(xlFija,.Height,-1)
		endwith
	ENDPROC

	PROCEDURE getdevol
		
		_CLIPTEXT = LTRIM(STR(this.acum,14,this.ndezim))
		CLEAR TYPEAHEAD
		IF !ISNULL(this.formcall)
			cMetodo=""
			This.Parent.Release
			IF !ISNULL(this.objref)
				IF EMPTY(cMetodo)
					THIS.OBJRef.VALUE=This.ACUM
				endif
				This.objref.refresh
				IF !EMPTY(this.metodo)
					This.Parent.Hide
					nLines=ALINES(gametod,CHRTRAN(this.metodo,CHR(32),""),4,",")
					FOR wi=1 TO nLines
						RAISEEVENT(this.formcall,gaMetod[wi])
					ENDFOR
				ENDIF
				this.objref.setfocus
			ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE getfopen
		LPARAMETERS xcFile,xnHandler,xlNotVerb,xnPrivileg,xlOpenEmpty
		**************************************************************
		*!*	Objeto: abrir un archivo con FOPEN()
		*!*	xcFile:    	Ruta y Nombre de archivo completo que se intenta abrir
		*!*				Se puede pasar como xcfile+"<eof/>" 
		*!*				para que quede en EOF()
		*!*	xnHandler: @ Handler pasado por referencia
		*!*	xlNotVerb: suprime comentarios si es .t.
		*!*	xnPrivileg, may be:
		*!*		0 Read Only Buffer
		*!*	 	1 Write ONly Buffer
		*!*	 	2 Read Write Buffer
		*!*	 	10 Read Only No Buffer
		*!*	 	11 Write ONly No Buffer
		*!*	 	12 Read Write No Buffer
		*!*	xlOpenEmpty: Valida la apertura de un archivo vacío
		*!* --------------------------------------------------------------
		*!*	IF !This.GetFopen(addbs(lcRoot)+"archivo.txt",@nfop,.F.,12)
		*!*		RETURN
		*!*	ENDIF
		*!* --------------------------------------------------------------
		
		local lRet,gnEnd,gnTop,nat,lcTag
		lREt=.t.
		STORE "" TO lcTag
		IF EMPTY(xcfile)
			IF !xlNotVerb
				MESSAGEBOX("Nombre de archivo vacío",0,"GetFopen Message")
			ENDIF
			RETURN .F.
		ENDIF
		nat=AT("<",xcFile)
		IF nat > 0
			lcTag=LOWER(TRIM(SUBSTR(xcFile,nat)))
			xcFile=LEFT(xcfile,nat-1)
		ENDIF
		
		IF !file(xcFile)
			if !xlNotVerb
				MESSAGEBOX("El archivo &xcFile no existe",0,"GetFopen Message")
			endif
			RETURN .F.
		endif
		if vartype(xnPrivileg)#"N"
			xnPrivileg=0
		ENDIF
		IF !INLIST(xnPrivileg,0,1,2,10,11,12)
			xnPrivileg=12
		ENDIF
		
		xnHandler=fopen(xcFile,xnPrivileg)
		if xnHandler=-1
			if !xlNotVerb
				MESSAGEBOX("El archivo &xcFile no pudo abrirse",0,"GetFopen Message")
			ENDIF
			RETURN .F.
		ENDIF
		gnEnd=Fseek(xnHandler,0,2)
		IF EMPTY(lcTag) OR lcTag#"<eof/>"
			gntop=Fseek(xnHandler,0)	
		ENDIF
		
		IF !xlOpenEmpty AND gnEnd<=0
			if !xlnotVerb
				MESSAGEBOX("El archivo &xcFile no tiene contenido",0,"GetFopen Message")
			endif
			FCLOSE(xnHandler)
			lRet=.f.
		ENDIF
		
		RETURN lret
		
	ENDPROC

	PROCEDURE getgrilla
		
		LOCAL nSpa,nCols,nWid,nWidgen,i,cMask,nDezim
		nDezim=This.ndezim
		ADDPROPERTY(thisform,"fileUsed","zCalcur")
		IF USED("ZCALCUR")
			SELECT ZCALCUR
			USE
		ENDIF
		
		this.NumSpa=14
		CREATE CURSOR ZCALCUR ;
			("OPENPAR" C(6),;
			"SIGNOPER" C(1),;
			"IMPORTE" N(this.numspa,ndezim),;
			"SHUTPAR" C(6),;
			"PARENTES" C(80),;
			"IDITEM" I)
		nWidGen=0
		nCols=4
		
		WITH This.GRILLA
			.RecordSource='zcalcur'
			.Columncount=nCols
			.hEADERhEIGHT=0
			.DeleteMark=.f.
			.REcordMark=.f.
			.ScrollBars=0
			.GridLines=0
			.HighlightBackColor=rgb(153,171,174)	
			
			.Setall("Readonly",.t.,"Column")
			.Setall("Fontsize",8,"Column")		
			.Setall("Fontsize",8,"Header")
			.Setall("FontBold",.t.,"Header")
		
			.Columns[1].ControlSource='zCalcur.openpar'
			.Columns[1].Width=10
		
			.Columns[2].ControlSource='zCalcur.signoper'
			.Columns[2].Width=14
			.Columns[2].FontSize=8
		
		
			.Columns[3].Format="Z"
		
			.Columns[3].ControlSource='zCalcur.importe'
			
			.Columns[4].ControlSource='zCalcur.ShutPar'
			.Columns[4].Width=10
		
		
			*.Width=nWidGen+nCols-1
		ENDWITH
		This.Putdecimal()
		this.Widgrid(This.grilla)
		WITH this
			.Shape3.Width=.Grilla.left+.Grilla.Width+5-.Shape3.left
		ENDWITH
		
		
			
		
		
		
	ENDPROC

	PROCEDURE getvalform
		nClipVal=0
		
		IF !ISNULL(this.formcall)
			IF !ISNULL(this.objref)
				obRef=this.objref
				nClipVal=this.objRef.Value
			ENDIF
		ENDIF
		
		if nClipVal#0
			with this
				.Numero=nClipVal
				cCadena=ltrim(str(nClipval,14,.ndezim))
				ctradec=Right(cCadena,.ndezim)
				if Val(cTradec)=0
					cCadena=ltrim(str(nClipVal))
				else
					for wi=.ndezim to 1 step-1
						if Right(cTradec,1)#"0"
							exit
						endif
						cTradec=Substr(cTradec,1,wi-1)
					next
					if empty(cTradec)
						cCadena=ltrim(str(nClipVal))
					else
						cCadena=ltrim(str(nClipval))+"."+ctradec
					endif
					
				endif
				.Dezimac=iif(At(".",cCadena)>0,.t.,.f.)
				.Cadena=cCAdena
				.Text1.Value=.numero
				.text7.refresh
				.Grilla.HighlightBackColor=rgb(153,171,174)
			endwith
		endif
		
	ENDPROC

	PROCEDURE getvaltag
		LPARAMETERS xcTag,xlReturnObj
		**************************************
		* PROCEDURE getValTag(xcTag,xlReturnObj)
		**************************************
		* Etiquetas calificadas ( <NOMBRE|N|1250.12/>  )
		*-----------------------------------------------
		* Si xlREturnObj=.F. (Default)
		* 	Devuelve el valor de una etiqueta
		*	lcTag="<ESTADO|L|.T./>
		*	? GetValTag(lcTag)	&& muestra .T.
		*
		* Si xlReturnObj= .T.
		*	Devuelve la referencia a un objeto "empty"
		*	con tres propiedades: Tag, Value y Type
		*
		*	lcTag="<IMPORTE|N|12726.15/>
		*	obj=GetValTAg(LcTag,.t.)
		*	if !isnull(obj)
		*		? obj.value	&& devuelve 12726.15
		*		? obj.Tag	&& devuelve "IMPORTE"
		*		? Obj.type	&& devuelve "N"
		*		obj=null
		*	ENDIF
		*-----------------------------------------------------
		* Etiquetas cerradas simples
		*-----------------------------------------------------
		* lcTag="<ANIMAL=PERRO/>
		* ? GetvalTAg(lcTag)	&& muestra "PERRO"
		*
		* 	obj=GetValTag(lcTag,.t.)
		*	IF !isnull(obj)
		*		? Obj.TAg	&& muestra "ANIMAL"
		*		? obj.Value	&& muestra "PERRO"
		*		? obj.type	&& siempre muestra "C"
		*	ENDIF
		*-------------------------------------------------------
		* Rutina de exploración:
		*	LOCAL obj,fcr,nHand,lnResp
		*	FCR=ADDBS(FullPath(""))+"formula.txt"
		*	nhand=-1
		*	IF !This.GetFopen(fcr,@nhand,.f.,12)
		*		RETURN
		*	ENDIF
		*	DO WHILE !FEOF(nhand)
		*		lcTag=FGETS(nhand,2048)
		*		DO case
		*			CASE AT("|S|=",UPPER(lcTag))#0	&& ExecScrip()
		*				=GetValTAg(lcTag)
		
		*			CASE AT("#|=",lcTAg)#0			&& Define la tag como variable de paso y le asigna el valor
		*				obj=GetValTAg(lcTAg,.t.)
		*				IF !ISNULL(obj)
		*					lcEtiq=obj.Tag
		*					&lcEtiq=obj.Value
		*					obj=null
		*				ENDIF
		*
		*			OTHERWISE
		*		
		*				lnResp=GetValtag(lcTag)		&& Asigna a lnResp el valor contenido de la tag (puede ser |E|)
		*				
		*		ENDCASE
		*	
		*	ENDDO
		*	=FCLOSE(nhand)
		*	
		******************************************************
		
		LOCAL lcLast,lcREs,lnLines,nPart,lcVari,lctype,;
			lxReturn,objReturn,lcTryValor
		
		IF VARTYPE(xctag)#"C" OR EMPTY(xcTag)
			RETURN IIF(xlREturnObj,null,"")
		ENDIF
		LOCAL ARRAY gaTags(1),gaTypes(1)
		xcTAg=ALLTRIM(xcTag)
		xcTAg=ALLTRIM(xctag)
		* Tag inválida
		IF LEFT(xcTag,1)#"<" OR ;
				AT("=",xcTAg)=0 OR ;
				RIGHT(xcTag,1)#">"
			RETURN IIF(xlREturnObj,null,"")
		ENDIF
		lxREturn=""
		lcType="C"
		
		xcTag=ALLTRIM(xcTag)
		lcLast=IIF(RIGHT(xcTag,2)=="/>","/>",RIGHT(xcTag,1))
		lcRes=STREXTRACT(xcTag,"<",lcLast)
		
		IF AT("|=",lcRes)#0
			lnlines=ALINES(gaTags,lcRes,1+2,"|=")
			IF lnLines>0
				gaTAgs[1]=gaTags[1]+"|"
			ENDIF
		ELSE
			lnLines=ALINES(gatags,lcRes,1+2,"=")
		ENDIF
		*lcVari=gatags[1]
		IF lnLines>1
			lcTryValor=""
			FOR i=2 TO lnLines
				lcTryValor=lcTryValor+gaTags[i]
			NEXT
			IF AT("#|",gatags[1])#0
				xlREturnObj=.t.
				gaTAgs[1]=STRTRAN(gaTAgs[1],"#|","|")
			ENDIF
			lcVari=gatags[1]
			lcTryValor=gatags[2]
			nat=AT("|",gatags[1])
			IF nAt=LEN(gatags[1])-IIF(RIGHT(gatags[1],1)="|",2,1)
				nPart=ALINES(gatypes,gatags[1],5,"|")
				lcVari=gatypes[1]
				lcType=UPPER(gatypes[2])
				DO case
					CASE lcType$"NI"
						lxReturn=VAL(lcTryValor)
					CASE lcType="L"
						lxReturn=IIF(AT("T",lcTryValor)#0,.t.,.f.)
					
					CASE LCTYPE="D"
						lxReturn=CTOD(lcTryValor)
					
					CASE LCTYPE="T"
						lxReturn=CTOT(lcTryValor)
					CASE lctype="E"
						lxReturn=EVALUATE(lcTRyValor)
					CASE lcType="S"
						lcTryValor=CHRTRAN(lcTryValor,CHR(10),"")
						lcTryValor=CHRTRAN(lcTRyValor,CHR(28),CHR(13))
						lxReturn = EXECSCRIPT(lcTryValor)
					CASE lctype="X"
						lxREturn=null
					CASE lcType="O"
						lxReturn=null
					OTHERWISE
						lxReturn=lcTRyValor
				ENDCASE
			ELSE
				lxReturn = lcTryValor		
			ENDIF
		ENDIF
		IF xlREturnObj
			objReturn=CREATEOBJECT("empty")
			ADDPROPERTY(objReturn,"Tag",lcVari)
			ADDPROPERTY(objReturn,"Value",lxREturn)
			ADDPROPERTY(objReturn,"Type",lctype)
		ENDIF
		RETURN IIF(xlReturnObj,ObjReturn,lxREturn)
		
	ENDPROC

	PROCEDURE greenlines
		LPARAMETERS xoGrid,xnColor,xcLines
		LOCAL i,nLines,radColor,lcCompare,nAddhei,nAddtop
		*--------------------------------------------------
		* xoGrid: Refrencia al objeto Grid
		* xclines="LRTB" Left,Right,Top,Botton, "LRBT"=Default
		*          Pueden estar en cualquier orden
		* xnColor= Número de Color ó Cadena: "114,108,213" | ",255," | "128"
		*          Default=RGB(114,136,141)
		*********************************************************************
		STORE 0 TO nAddHei,nAddTop
		
		IF VARTYPE(xcLines)#"C"
			xcLines="LRTB"
		ENDIF
		xcLines=UPPER(ALLTRIM(xcLines))
		
		IF EMPTY(xnColor)
			xnColor=RGB(114,136,141)
		ENDIF
		IF VARTYPE(xnColor)="C"
			lcCompare="1234567890,"
			xnColor=UPPER(ALLTRIM(xnColor))
			radColor=CHRTRAN(xnColor,CHRTRAN(xnColor,lcCompare,""),"")
			nlines=ALINES(gaVal,radColor,1,",")
			IF nLInes<3
				DIMENSION gaVal(3)
			ENDIF
			FOR i=1 TO 3
				gaVal[i]=IIF(EMPTY(gaval[i]),0,MIN(VAL(gaval[i]),255))
			NEXT
			xnColor=RGB(gaval[1],gaval[2],gaval[3])
			
		ENDIF
		
		&& Para el color negro, no incorpora las líneas
		IF xnColor=0
			RETURN
		ENDIF
		xoForm=xoGrid.parent
		IF AT("L",xclines)#0
			IF !PEMSTATUS(xoForm,"LineVLeft",5)
				xoForm.NewObject("LineVLeft","Line")
			ENDIF
			WITH xoForm.LineVLeft
				.BorderColor=xnColor
				.width=0
				.Height=xoGrid.Height+nAddHei
				.Top=xoGrid.Top+nAddtop
				.Left=xoGrid.left
				.Visible=.t.
			ENDWITH	
		ENDIF
		IF AT("R",xcLines)#0
			IF !PEMSTATUS(xoForm,"LineVRight",5)
				xoForm.NewObject("LineVRight","Line")
			ENDIF	
			WITH xoForm.LineVRight
				.BorderColor=xncolor
				.width=0
				.Height=xoGrid.Height+nAddHei
				.Top=xoGrid.Top+nAddTop
				.Left=xoGrid.left+xoGrid.Width-1
				.Visible=.t.
			ENDWITH	
		ENDIF
		IF AT("T",XCLINES)#0
			IF !PEMSTATUS(xoForm,"LineHTop",5)
				xoForm.NewObject("LineHTop","Line")
			ENDIF
			
			WITH xoForm.LineHTop
				.BorderColor=xncolor
				.width=xoGrid.Width
				.Height=0
				.Top=xoGrid.Top+nAddtop
				.Left=xoGrid.left
				.Visible=.t.
			ENDWITH	
		ENDIF
		
		IF AT("B",xcLines)#0	
			IF !PEMSTATUS(xoForm,"LineHBott",5)
				xoForm.NewObject("LineHBott","Line")
			ENDIF
		
			WITH xoForm.LineHBott
				.BorderColor=xnColor
				.width=xoGrid.Width
				.Height=0
				.Top=xoGrid.Top+xoGrid.Height-1
				.Left=xoGrid.left
				.Visible=.t.
			ENDWITH
		ENDIF
		
		
		
		
		
			
	ENDPROC

	PROCEDURE grgotfocus
		nEvents=AEVENTS(gaEvent,0)
		IF nEvents=0	
			RETURN
		ENDIF
		loSuc=gaEvent[1]
		*oParent=loSuc.Parent.parent
		loSuc.parent.parent.HighlightBackColor=rgb(0,0,128)
		
	ENDPROC

	PROCEDURE grlostfocus
		nEvents=AEVENTS(gaEvent,0)
		IF nEvents=0	
			RETURN
		ENDIF
		loSuc=gaEvent[1]
		loSuc.parent.parent.HighlightBackColor=rgb(153,171,174)
	ENDPROC

	PROCEDURE gstandar
		lparameters cObjWid,cObjHei,xlCmg1,lAyuda,xgnAddHei,xgnDespla
		*This.Parent.FunRaya1.gStandar("ShapeWidth","ShapeHeight,lCmg1[cObjeto],LAyuda)
		local gnAdd
		if Vartype(cObjHei)#"C".or.empty(cObjHei)
			cObjHei=cObjWid
		endif
		
		cobCmg="Cmg1"
		kevar=Vartype(xlCmg1)
		if kevar="C"
			cObCmg=xlCmg1
			lCmg1=!empty(cObCmg)
		else
			lCmg1=xlCmg1
		endif
		if vartype(xgnAddHei)#"N"
			xgnAddHei=0
		endif
		if vartype(xgnDespla)#"N"
			xgnDespla=0
		endif
		gnAdd=iif(lcmg1,42,32)+xgnAddHei
		this.formublok(.f.)
		with thisform
			.Width=.&cObjWid..left*2+.&cObjWid..width
			.Height=.&cObjHei..top+.&cObjHei..Height+gnAdd
			if lCmg1
				.&cObCmg..Top=.Height-.&cObCmg..Height-6
				.&cObCmg..Left=This.ThCentrar(.Width,.&cObCmg..Width)+xgnDespla
			endif
			if lAyuda
				.CmAyuda1.top=.Height-24
				.CmAyuda1.Left=3
			endif
			.cmdClose1.top=.Height-28
			.cmdClose1.Left=.Width-28
		endwith
		This.FormuBlok(.t.)
	ENDPROC

	PROCEDURE Init
		*!*	Método de Convocatoria de la calculadora general
		*!*	------------------------------------------------
		*!*	IF !PEMSTATUS(_screen,"zCalcu2",5)
		*!*		ADDPROPERTY(_screen,"zCalcu2",NEWOBJECT("FrmZCalcu2","thcalc"))
		*!*	ENDIF
		*!*	IF VARTYPE(_screen.zCalcu2)="O"
		*!*		_screen.zCalcu2.WindowState=0
		*!*		_screen.zCalcu2.Show()
		*!*	ELSE
		*!*		_screen.zCalcu2=NEWOBJECT("FrmZCalcu2","thcalc")
		*!*	ENDIF
		*!*	--------------------------------------------------------------------
		with this
			.BorderWidth=0
			.BackStyle= 0
			.Cancelop=.t.
			.estirar=.t.
			.nDezim=2
			.OldDecimal=2
			store 0 to .acum,.numero,.NItem,;
			.psolve1,.psolve2,.psolve3,.nparen,.npacie,.memoria1
			store "" to .stParen,.Cadena
			.Signo="+"
			.SaveDezim=.t.
			.formcall=null
			.objref=null
			.metodo=""
		
			.aTeclop[1,1]=43
			.aTeclop[1,2]="+"
			.aTeclop[2,1]=45
			.aTeclop[2,2]="-"
			.aTeclop[3,1]=42
			.aTeclop[3,2]="*"
			.aTeclop[4,1]=47
			.aTeclop[4,2]="/"
			.aTeclop[5,1]=13
			.aTeclop[5,2]="+"
		
			.aDevol[1]=13
			.aDevol[2]=127
			.aDevol[3]=48
			.aDevol[4]=49
			.aDevol[5]=50
			.aDevol[6]=51
			.aDevol[7]=52
			.aDevol[8]=53
			.aDevol[9]=54
			.aDevol[10]=55
			.aDevol[11]=56
			.aDevol[12]=57
			.aDevol[13]=134
			.aDevol[14]=40
			.aDevol[15]=41
			.aDevol[16]=42
			.aDevol[17]=43
			.aDevol[18]=45
			.aDevol[19]=46
			.aDevol[20]=47
			.aDevol[21]=122
			.aDevol[22]=90
			.aDevol[23]=7
			.aDevol[24]=-4
			.aDevol[25]=-7
		
		
			.aDoble[1]=[++]
			.aDoble[2]=[--]
			.aDoble[3]=[**]
			.aDoble[4]=[//]
			.aDoble[5]=[+-]
			.aDoble[6]=[+*]
			.aDoble[7]=[+/]
			.aDoble[8]=[-+]
			.aDoble[9]=[-*]
			.aDoble[10]=[-/]
			.aDoble[11]=[*+]
			.aDoble[12]=[*-]
			.aDoble[13]=[*/]
			.aDoble[14]=[/*]
			.aDoble[15]=[/+]
			.aDoble[16]=[/-]
		
		ENDWITH
	ENDPROC

	PROCEDURE limpiar
		SELECT ZCALCUR
		ZAP
		This.GRILLA.REFRESH
		
		With this
			store 0 to .psolve1,.psolve2,.psolve3,.nparen,;
				.nitem,.numero,.acum
			store "" to .stParen,.Cadena,.plista
			.CmBorrope.visible=.f.
			.Signo="+"	
			.dezimac=.f.	
			.rcparen=.f.
			.text6.value=.stParen
			.cmDelParen.visible=.f.
			.CmAbre.Visible=.t.
			.CmCierra.Visible=.f.
			.CmClip.Visible=.f.
			.Text1.Value=.numero	
			.text2.value=.Acum
			.text3.refresh
			.text7.refresh
			.text8.value=0
			.text9.value=len(.cadena)
		*	.text11.refresh
			.txdezim.refresh
			.TxMem.Value=.Memoria1
		
			.check1.refresh
			.Check2.refresh
		*	.Check3.refresh
		endwith
		
	ENDPROC

	PROCEDURE micurdir
		LOCAL cdir,objShell,cDir
		objShell=CreateObject("Wscript.Shell")
		cDir=objShell.CurrentDirectory
		objShell=null
		IF RIGHT(cdir,1)="\"
			cDir=LEFT(cDir,LEN(cdir)-1)
		endif
		return cDir
		
	ENDPROC

	PROCEDURE opera
		LOCAL nSolve,ladd,lnNroParOpen,lnNroParClose,lcSigno
		with this
			cMasca="9,999,999,999."+repli("9",.nDezim)
			lAdd=.t.
			if .nparen=0	
				.Stparen=""
				if !empty(.numero)
					.Acum=This.Opermat(.signo,.Acum,.Numero,.ndezim)
					.Nitem=.Nitem+1
					INSERT INTO zcalcur (openpar,signoper,importe,shutpar,iditem) ;
						VALUES ("",.Signo,.Numero,"",.nitem)
					.grilla.refresh			
				endif
			else
				cnP=ltrim(str(.nParen))
		
				lnNroParOpen=Occurs("(",.stparen)
				lnNroParClose=Occurs(")",.stparen)
				if lnNroParOpen=lnNroParClose
					&& cerró parentesis. debe acumular resultado.
					&& y operar con el signo en posicion 1
					lcSigno=Left(.stParen,1)
					.stParen=Substr(.stParen,AT("(",.StParen))
					nSolve=EVALUATE(.stParen)
					.Acum=This.Opermat(lcSigno,.ACum,nSolve,.nDezim)
		
					INSERT INTO zcalcur (openpar,signoper,importe,shutpar,iditem,parentes) ;
						VALUES ("(",lcSigno,nSolve,")",.nitem,.stParen)
					.grilla.refresh				
		
					.nparen=0
					.stparen=""
					.rcparen=.t.
		
				else
					.psolve1=This.Opermat(.signo,.psolve1,.Numero,.ndezim)
					if len(.stParen)=2
						.stParen=.stParen+.cadena
					else
						if !empty(.cadena)
							.stParen=.stParen+.signo+.cadena
						endif
					endif
				endif
			
			endif
			.Numero=0
			.Cadena=""
			.Dezimac=.f.
			.Text1.Value=.numero
			.text2.value=.Acum
			.text7.refresh
			.text3.refresh
			.text6.value=.stParen
			.text9.value=len(.cadena)	
			.CmClip.Visible=.t.
			.Text8.Value=.nItem
			
		endwith
	ENDPROC

	PROCEDURE opermat
		LPARAMETERS cSigno,nAcumulador,nNumero,nDecimals
		******************************************************
			*This.Opermat(cSignoper,nAcumulador,nNumero,nDecimals)
		do case
			case csigno="+"
				nAcumulador=nAcumulador+nNumero
			case csigno="-"
				nAcumulador=nAcumulador-nNumero
			case csigno="/"
				nAcumulador=Round(nAcumulador/nNumero,ndecimals)
			case csigno="*"
				nAcumulador=nAcumulador*nNumero	
		endcase
		return nAcumulador
	ENDPROC

	PROCEDURE putdecimal
		LOCAL nSpa,nDezim,lcMask
		nSpa=this.numspa
		nDezim=This.ndezim
		nRepe=nSpa+IIF(EMPTY(nDezim),0,nDezim+1)
		nComas=INT(nSpa/3)
		cForma=repli("9",nRepe)+REPLICATE(",",nComas)+IIF(EMPTY(nDezim),"",".")
		lcMask=This.Detmask(nspa,ndezim)
		lnWid=This.Wokupas(lcMask)
		WITH this
			.cmdupDecim.Enabled=IIF(.ndezim=8,.f.,.savedezim)
			.cmdDownDecim.Enabled=IIF(.ndezim=0,.f.,.savedezim)
			.Text1.InputMask=lcMask
			.Text2.InputMask=lcMask
			.TxMem.INputMask=lcMask
			.TxMem.Width=lnWid
			.TxDezim.value=.ndezim
			.TxMem.left=.Shape7.left+.Shape7.Width-lnWid-4
			.Label2.left=.TxMem.left-.Label2.Width-1
		ENDWITH
		WITH This.grilla
			.Columns[3].InputMask=lcMask
			.Columns[3].Width=lnWid
		ENDWITH
		this.Numforma=lcMask
		
		
	ENDPROC

	PROCEDURE putparen
		with this
			.cMrAIZ.Visible=.f.
			.nparen=.nparen+1
			.stparen=.stparen+.signo+"("
			.Cmbas.Setall("Enabled",.f.)
			.text6.Value=.StParen
			.CmDelParen.Visible=.t.
			if .nParen>2
				.CmAbre.Visible=.f.
			endif
			
		endwith	
	ENDPROC

	PROCEDURE putraya
		LPARAMETERS xObjeto
		LOCAL lntop,lnLeft,lnWid,lnHei
		IF PCOUNT()=0
			This.Parent.imr2.visible=.f.
		   RETURN 
		ENDIF
		lnTop=OBJTOCLIENT(xObjeto,1)
		lnLeft=OBJTOCLIENT(xObjeto,2)
		lnWid=OBJTOCLIENT(xObjeto,3)
		lnHei=OBJTOCLIENT(xObjeto,4)
		IF !PEMSTATUS(thisform,"imr2",5)
			IF PEMSTATUS(_screen,"classDir",5)
				thisform.NewObject("imr2","Imaraya",LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"))
			ELSE
				thisform.NewObject("imr2","imaraya","thcalc")
			ENDIF
		ENDIF
		
		With This.Parent.imr2
			.visible=.t.
			.left=lnLeft+This.ThCentrar(lnwid,.width)
			.top=lnTop+lnHei
		ENDWITH
		
	ENDPROC

	PROCEDURE puttag
		LPARAMETERS xcClave,xcValor,xnLevel,xcForceType,xlNotype,xcSep1,xcSep2
		****************************************************************************
		* PROCEDURE This.This.PutTag(xcClave,xcValor,xnLevel,xcForceType,xlNotype,xcSep1,xcSep2)
		****************************************************************************
		* Genera una Tag Cerrada
		*!*		xcClave:		Clave de etiqueta
		*!*		xcValor:		Valor de la etiqueta
		*!*		xnLevel:		Desplazamiento de escritura (REPLICATE(CHR(9),xnLevel)
		*!*		xcForceType:	Tipo Forzado (I,E,S) cuando se necesita un comportamiento especial
		*!*		xlNoType:		Etiqueta no calificada (cerrada normal)
		*!*		xcSep1:			Separador de apertura	("<" default)
		*!*		xcSep2:			Separador de cierre		("/>" default)
		*-----------------------------------------------------------------------------------------
		* xlNotype=.F. (Default)
		* <NOMBRE|N|1250.12/> (tipo numérico)
		* <DIA|D|25/12/2013/> (Tipo date)
		* <RESOLVE|E|SQRT( lnCateto1**2 + lnCateto2**2 )/>
		* <PROCEDE|S|MESSAGEBOX("Resultado="+LTRIM(STR(lnResp,14,4)))/>
		*---------------------------------------------------------------
		* Los tipos "CNLDT" se autocalifican
		* This.This.PutTag("VALOR",2012) genera: "<VALOR|N|=2012/>"
		* This.This.PutTag("ESTADO",.T.) genera: "<ESTADO|L|.T./>"
		* This.This.PutTag("CUIT","20120482980") genera "<CUIT|C|=2012048298/>"
		* This.This.PutTag("FECHA",17/12/2013")  genera "FECHA|D|=17/12/2013/>"
		*
		*-------------------------------------------------------------------------
		* Definición forzada
		*
		*	Escritura
		*	LOCAL lcform,lcPut
		*	LCFORM=""
		*	TEXT TO LCFORM TEXTMERGE NOSHOW PRETEXT 7
		*	<<This.This.PutTag("LNRESP",0,0,"*N")>>
		*	<<This.This.PutTag("LNCATETO1",12,0,"*N")>>
		*	<<This.This.PutTag("LNCATETO2",20,0,"*N")>>
		*	<<This.This.PutTag("LNRESP","SQRT( lnCateto1**2 + lnCateto2**2 )",0,"*E")>>
		*	<<This.This.PutTag("LNRESP","(lnResp+LnResp**2)/2",0,"*E")>>
		*	<<This.This.PutTag("MESSAGE",[MESSAGEBOX("Resultado="+LTRIM(STR(lnResp,14,4)))],0,"S")>>
		*	ENDTEXT
		*
		*	LcFile=ADDBS(fULLPATH(""))+"Formula.txt"
		*	STRTOFILE(lcForm,lcFile)
		*
		*	Nota: En xcForceType se utiliza "*", pero también se puede utilizar
		*	      cualiquier otro símbolo que no sea una letra
		*	      También se podría escribir a la inversa, "E*" en lugar de "*E"   	
		*
		*-------------------------------------------------------------------------------------
		*	REsultado (Archvivo Formula.txt)
		*	<LNRESP|N#|=0/>						&& define lnREsp=0
		*	<LNCATETO1|N#|=12/>					&& define LnCateto1=12
		*	<LNCATETO2|N#|=20/>					&& define LnCateto2=20
		*	<LNRESP|E#|=SQRT( lnCateto1**2 + lnCateto2**2 )/> 	&& lnResp=Sqrt(ln..."
		*	<LNRESP|E#|=(lnResp+LnResp**2)/2/>			&& lnResp=(lnResp+lnResp**2)/2
		*	<MESSAGE|S|=MESSAGEBOX("Resultado="+LTRIM(STR(lnResp,14,4)))/>
		*
		*	Nota: Al ejecutar, el Messagebox mostrará "Resultado=283.6619"
		*
		*---------------------------------------------------------------
		* Ejemplo para type "S" [ ExecScript() ]
		*	*Generación de la etiquta
		*
		*	LOCAL lcform,lcPut
		*	LCFORM=""
		*	TEXT TO LCFORM NOSHOW PRETEXT 7
		*	USE C:\THEODORE\ALOJA IN 0 EXCLUSIVE
		*	SELECT ALOJA
		*	IF RECCOUNT()>10
		*		GO 10
		*		replace valchar WITH "RGB() FUNCTION"
		*	ENDIF
		*	BROWSE
		*	USE
		*	ENDTEXT
		*
		*	LCPUT="SCRIPT"
		*	LcFile=ADDBS(Fullpath(""))+"ScripTag.txt"
		*	STRTOFILE(This.This.PutTag(lcPut,lcForm,,"S"),lcFile)
		*
		*	*Ejecuta procedimiento
		*	LcFile=ADDBS(FullPath(""))+"ScripTag.txt"
		*	=This.GetValTag(FILETOSTR(lcFile))
		*-----------------------------------------------------
		
		LOCAL lcType,lcPutVal,lcAddComm
		STORE "" TO lcAddComm
		lcType=VARTYPE(xcValor)
		IF VARTYPE(xcForceType)="C" AND !EMPTY(xcForceType) 
			xcForceType=UPPER(ALLTRIM(xcForceType))
			IF LEN(xcForceType)>1
				xcForceType=This.ValidTExt(xcForceType,2)
				lcAddComm="#"
			ENDIF
			IF xcForceType$'CNDTLES'
				lcType=xcForceType
				xlNotype=.F.
				IF lcType="S"
					xcValor=CHRTRAN(xcValor,CHR(10),"")
					xcValor=CHRTRAN(xcValor,CHR(13),CHR(28))
				ENDIF
				
			ENDIF
		ENDIF
		
		
		DO case
			CASE lcType="N"
		
				LcPutVal=ltrim(str(xcValor,20,this.TelDecim(xcValor)))
			CASE LCTYPE="L"
				lcPutVal=IIF(xcValor,".T.",".F.")
			CASE lcType="D"
				lcPutVal=DTOC(xcValor)	
			CASE lcType="T"
				lcPutVal=TTOC(xcValor)
			CASE lcType="X"
				LcPutVal=".null."
			CASE lcType="O"
				lcPutVal="Object Reference"
			OTHERWISE
				LcPutVal=xcValor
		ENDCASE
		
		IF VARTYPE(xcSep1)#"C" OR EMPTY(xcSep1)
			xcSep1="<"
		ENDIF
		IF VARTYPE(xcSep2)#"C" OR EMPTY(xcSep2)
			xcSep2="/>"
		ENDIF
		IF VARTYPE(xnLevel)#"N"
			xnLevel=0
		ENDIF
		lcType=lcType+lcAddComm
		RETURN REPLICATE(CHR(9),xnLevel);
			+xcSep1;
			+ALLTRIM(xcClave);
			+IIF(xlNoType,"","|"+lcType+"|");
			+"=";
			+ALLTRIM(lcPutVal);
			+xcSep2
		
	ENDPROC

	PROCEDURE qitparen
		with this
			.npacie=.npacie+1
			if !empty(.cadena)
				.stparen=.stparen+.signo+.cadena
				.cadena=""
				.text7.refresh
			endif
		*	csp="stparen"+ltrim(str(.nparen))
		*	cpsol="psolve"+ltrim(str(.nparen))
			cpsol="psolve1"
			.stparen=.stparen+")"
			nocabre=Occurs("(",.stparen)
			nocshat=Occurs(")",.stparen)
			if At("(*",.stparen)>0
				.stparen=StrTran(.stparen,"(*","(")
			endif
			if At("(/",.stparen)>0
				.stparen=StrTran(.stparen,"(/","(")
			endif		
					
			if At("(+",.stparen)>0
				.stparen=StrTran(.stparen, "(+" , "(" )
			endif
		
			if nocabre#nocshat
			*	Messagebox("Abiertos: "+ltrim(str(nocabre));
			*		+"Cerrados: "+ltrim(str(nocshat));
			*		+"Faltan paréntesis.",0,"Paréntesis")
				return 
			endif			
			cCalcula=alltrim(substr(.stparen,2))
			if cCalcula="()" .or. cCalcula="(())"
				.CmDelParen.Click
		
				return
			endif	
			.Psolve1= Evaluate(cCalcula)
			.TExt6.Value=.Stparen
			this.Opera()
		*	.nparen=.nparen-1
		*	if nocabre=nocshat
		*		.nparen=0
		*	endif
			.CmAbre.Visible=.t.
			if .nparen=0
				.CmCierra.Visible=.F.
				.TEXT6.value=.stparen
				.CmDelParen.Visible=.f.
			*	.CmRaiz.Visible=!EMPTY(.Acum)
			ENDIF
		endwith
	ENDPROC

	PROCEDURE quitacar
		with this
			lDezimal=.Dezimac
			if .numero#0
				nlc=Len(.cadena)
				if nlc=1
					.Cadena=""
					lDezimal=.f.
				else
					.CAdena=Substr(.CAdena,1,nlc-1)
					IF RIGHT(.CADENA,1)="."
						.Cadena=Substr(.Cadena,1,At(".",.cadena)-1)
						lDezimal=.f.
					endif
				endif
				.Numero=iif(.Dezimac,Val(.Cadena),Int(.numero/10))
				.Dezimac=lDezimal
				.Text1.Value=.numero
				.text7.refresh
			endif
			.text9.value=len(.cadena)	
			
		ENDWITH
		
		
	ENDPROC

	PROCEDURE quitentra
		With this
			.Numero=0
			.dezimac=.f.
			.signo="+"
			.Cadena=""
			.Text1.Value=.numero
			.text3.refresh
			.text7.refresh
			.Text9.value=len(.cadena)
		Endwith
		
	ENDPROC

	PROCEDURE readcust
		LPARAMETERS xoForm
		LOCAL xnTop,xnLeft,lnHand,OBJ,LcGet
		lnHand=-1
		xntop=20
		xnleft=5
		
		IF this.getfopen("frmCalcu.txt",@lnHand,.t.,0)
			TRY
				LOCAL loEx as Exception
				DO WHILE !FEOF(lnHand)
					lcGet=FGETS(lnHand,1024)
					obj=this.getvaltag(lcGet,.t.)
					DO case
						CASE obj.tag="LEFT"
							xnleft=EVL(obj.value,xnleft)
						CASE OBJ.TAG="TOP"
							xnTop=EVL(obj.value,xnTop)
						CASE OBJ.TAG="CANCELOP"
							xoForm.cancelop=obj.value
						CASE OBJ.TAG="ESTIRAR"
							xoForm.estirar=obj.value
						CASE obj.tag="DECIMAL"
							xoForm.ndezim=EVL(obj.value,2)
							this.olddecimal=EVL(obj.value,2)
							this.ndezim=EVL(obj.value,2)
					ENDCASE
		
				ENDDO
			CATCH TO loEx
				loEx.UserValue=PROGRAM()
				this.showerror(LOEX)
			FINALLY
				=FCLOSE(lnHand)	
				OBJ=NULL
			ENDTRY
			
		ENDIF
		WITH xoForm
			.top=xnTop
			.left=xnLeft
		ENDWITH
		
	ENDPROC

	PROCEDURE reopera
		LPARAMETERS xlRestable
		LOCAL nCount
		nCount=0
		This.Parent.acum=0
		This.Parent.nitem=0
		nAcum=0
		nDezim=This.Parent.ndezim
		
		SELECT zcalcur
		IF xlRestable
			ngReg=RECNO()
		ENDIF
		
		SCAN
			IF !EMPTY(parentes)
				replace Importe WITH EVALUATE(ALLTRIM(parentes))
			ENDIF
			nAcum=This.Opermat(signoper,nAcum,importe,ndezim)
			nCount=nCount+1
		ENDSCAN
		IF xlRestable.and.!EMPTY(ngREg)
			GO ngReg
		ENDIF
		WITH this
			.nItem=nCount
			.Text8.Value=nCount
			.Acum=nAcum
			.text2.value=nAcum
		ENDWITH
		
		
	ENDPROC

	PROCEDURE savecust
		LPARAMETERS xoForm
		TRY
			LOCAL loex as Exception
			lnHand=FCREATE("frmCalcu.txt")
			=FPUTS(lnHand,this.puttag("TOP",xoForm.Top))
			=FPUTS(lnHand,this.puttag("LEFT",xoForm.Left))
			=FPUTS(lnHand,this.puttag("ESTIRAR",xoForm.ESTIrar))
			=FPUTS(lnHand,this.puttag("CANCELOP",xoForm.CANcelop))
			=FPUTS(lnHand,this.puttag("DECIMAL",IIF(this.savedezim,this.ndezim,this.olddecimal)))
		CATCH TO loEx
			loex.UserValue=PROGRAM()
			this.showerror(loEx)
		FINALLY
			=FCLOSE(lnhand)
			loex=null
			
		ENDTRY
		
	ENDPROC

	PROCEDURE separtext
		LPARAMETERS cFrase,nAncho,xaMatriz,xnMinDef
		
		*PROCEDURE SEPARTEXT()
		*****************************************************
		local fi,qi,nit,lenfra,apunto,di,gaparte,ngap,xi,nis,nspacios,nSaltos,sbFrase,xi_
		* xnMinDef se utiliza cuando se necesita un minimo de items en
		* la matriz pasada por referencia. Completa con " "
		if Vartype(xnMindef)#"N"
			xnMindef=0
		endif
		if vartype(nAncho)#"N"
			nAncho=70
		endif
		cFrase=alltrim(cFrase)
		sbFrase=cFrase
		* Si la frase es Vacio, vuelve de inmediato
		if empty(cfrase)
			if xnMindef=0
				Dimension xaMatriz(1)
			else
				Dimension xaMatriz(xnMindef)
			endif
			Store "" to xaMatriz
			return
		else
			*Revisar los puntos
			npuntos=Occurs(".",cFrase)
			if npuntos#0
				oFrase=""
				nlen=len(cFrase)
				dimension gapuntos(1)
				gpase=0
				ni=0
				do while .t.
					ni=ni+1
					if ni=nlen
						exit
					endif			
					if Substr(cFrase,ni,1)="."
						cExa=Substr(cFrase,ni+1,1)
						if !INlist(cExa,Chr(32),".")
							cFrase=Substr(cFrase,1,ni)+" "+Substr(cFrase,ni+1)
							nlen=nlen+1
						endif
					endif
		
				enddo
		
		
			endif
		endif
		
		* Calcula cantidad de saltos y divide en gaParte
		nspacios=Occurs(Chr(32),cFrase)
		ntrece=Occurs(chr(13),cfrase)
		nsaltos=Occurs(chr(10),cFrase)
		ngap=iif(nSaltos<2,1,nSaltos)
		
		
		* Antes decia ngap=iif(nsaltos<2,1,nTrece)
		nis=0
		Dimension gaParte(ngap)
		if nGap=1
			gaparte[1]=cfrase
		else
			xcFrase=cFrase
			do while .t.
				xngap=At(Chr(10),xcFrase)
				if xnGap=0
					exit
				endif
				nis=nis+1
				dimension gaParte(nis)
				gaParte[nis]=Left(xcFrase,xnGap-1)
				xcFrase=Substr(xcFrase,xnGap+1)
			
			enddo
			if !empty(xcFrase)
				nis=nis+1
				dimension gaparte(nis)
				gaParte[nis]=alltrim(xcFrase)
			endif
		endif
		
		for xi_=1 to alen(gaParte)
			gaparte[xi_]=CHRTRAN(gaParte[xi_],CHR(13)+CHR(19),"")
		*	if At(chr(13),gaParte[xi_])>0
		*		gaParte[xi_]=strtran(gaParte[xi_],chr(13),"")
		*	endif
		*	if At(chr(19),gaparte[xi_])>0
		*		gaparte[xi_]=Strtran(gaparte[xi_],chr(19))
		*	endif
		next
		nSumPerdi=0
		Dimension xaMatriz(1)
		nit=0
		for xi=1 to alen(gaParte)
			sbFrase=alltrim(gaparte[xi])
			nspacios=Occurs(Chr(32),sbFrase)
			Lenfra=Len(sbFrase)
		
			IF LENFRA<=nAncho
				nit=nit+1
				dimension xaMatriz(nit)
				xaMatriz[nit]=sbFrase
			else
				if nSpacios>0
				*aPunto[] recoge las posiciones de aparición de Chr(32)
					Dimension aPunto(1)
					di=0
					for qi=1 to len(sbFrase)
						npun=At(Chr(32),sbFrase,qi)
						if npun=0
							exit
						endif
						di=di+1
						Dimension aPunto(di)
						aPunto[di]=npun
					next
					nLast=1
					cRest=sbFrase
					nSumlen=0
					nParte=nAncho
				
					For di=1 to alen(aPunto)
						keBodrio=""
						nRemp=aPunto[di]
						if aPunto[di]>=nParte
						
							cProye=Alltrim(Substr(sbFrase,nLast,aPunto[di]-nLast+1))
							nLastResta=0
							do while len(cProye)>nAncho
								nLastResta=nLastResta+1
								cProye=Alltrim(Substr(sbFrase,nLast,aPunto[di-nLastREsta]-nLast+1))
							enddo
							nit=nit+1
							Dimension xaMatriz(nit)
							xaMatriz[Nit]=cProye
		*					Alltrim(Substr(sbFrase,nLast,aPunto[di]-nLast+1))
		
							nSumLen=nSumLen+Len(xaMatriz[nit])
							nPerdido=nAncho-len(xaMatriz[nit])
							nSumPerdi=nSumperdi+nPerdido
							nLast=aPunto[di-nLastResta]+1
							nParte=nSumLen+nAncho+nSumPerdi
						endif
						* Ultima parte
						if di=alen(apunto)
							nit=nit+1
							Dimension xaMatriz(nit)
							xaMatriz[Nit]=Alltrim(Substr(sbFrase,nLast,lenfra-nLast+1))
						endif
		
					next
				else
					nSta=int(len(sbfrase)/nAncho)
					if Mod(Len(sbfrase),nAncho)#0
						nSta=nsta+1
					endif
					xSta=1
					zbFrase=sbfrase
					for fi=1 to nSta
						nit=nit+1
						dimension xaMatriz(nit)
						zbFrase=Substr(zbFrase,xSta)
						xaMatriz[nit]=Left(zbfrase,nAncho)
						xSta=xSta+nAncho
					next
				endif
			endif
		next	
		if xnMindef>nit
			Dimension xaMatriz(xnMindef)
			for jo=Nit+1 to xnMindef
				xaMatriz[jo]=" "
			next
		endif
		
	ENDPROC

	PROCEDURE showerror
		LPARAMETERS objExcep
		LOCAL lcMens
		lcMens="Fecha "+TRANSFORM(DATETIME());
			+CHR(13)+"Mensaje: "+objExcep.message;
			+CHR(13)+"ErrorNo: "+TRANSFORM(objExcep.Errorno);
			+CHR(13)+"Llamada: "+objExcep.Uservalue 
		IF VERSION(2)#0
			lcMens=lcMens+CHR(13)+"Línea: "+TRANSFORM(objExcep.lineNo)
		ENDIF
		
		STRTOFILE(lcMens+CHR(13),"ThError.log",1)
		lcMens="Se ha producido un error:"+chr(13)+lcMens
		MESSAGEBOX(lcMens,0,tH_MENSAJE)
	ENDPROC

	PROCEDURE teldecim
		LPARAMETERS xcnNUmero,xnPrecision
		*****************************************
		* Determina la cantidad de decimales de un número.
		* xnPrecision podría ser Entre 10 y 16
		* 16 daría una precisión mayor pero válida para
		* números con alta cantidad de decimales.
		*********************************************
		local i_,LnNumero,lnpNum,cRest,;
			nDecimales,lcTipVar
		if vartype(xnprecision)#"N"
			xnPrecision=10
		endif
		lcTipVar=Vartype(xcnNumero)
		do case
			case lcTipVar="C"
				LnNumero=val(xcnNumero)
			case lcTipVar$'NI'
				LnNumero=xcnNumero
			other
				return 0
		endcase
		if LnNumero=0
			return 0
		endif
		nDecimales=16
		for i_=0 to 16
			lnpNum=Round(LnNumero*10**i_,xnPrecision)
			cRest=lnpNum-Int(lnpNum)
			nDecimales=i_
			if Round(cRest,xnPrecision)=0
				exit
			endif
		next
		return nDecimales
		
	ENDPROC

	PROCEDURE thcentrar
		LPARAMETERS wCont , wObje ,xnLeft,xnRight 
		*function thcentrar(wCont , wObje ,xnLeft,xnRight )
		**********************************
		* Permite centrar horizontalmente un objeto en un contenedor
		* wCont = ancho del contenedor (o espacio disponible)
		* wObje = ancho del objeto (o texto) a centrar en el contenedor
		* Devuelve la posicion Left del objeto o texto.
		* xnLeft= Desplazamiento de centrado (a la derecha)
		* xnRight= Desplazamiento de centrado (a la izquierda).
		
		if Vartype(xnLeft)#"N"
			xnleft=0
		endif
		if Vartype(xnright)#"N"
			xnright=0
		endif
		wCont=wCont - (xnLeft+xnRight)
		return xnLeft+ ( Round(wCont/2,0) - Round(wObje/2,0) )
	ENDPROC

	PROCEDURE widgrid
		LPARAMETERS xoGrid
		*******************
		IF VARTYPE(xoGrid)#"O"
			RETURN
		ENDIF
		LOCAL nRecMark,nBars,nAddWid,lRecordMark,nBars,lBars,i,;
			_rmt,_rmf,_bart,_barf,_adgr
			
		WITH xoGRid
			lRecordmark=.recordMark
			lBars=IIF(.ScrollBars>1,.t.,.f.)
			nCantCol=.Columncount
			nSumWidCol=0
			FOR i=1 TO nCantCol
				nSumwidcol=nSumWidCol + .Columns[i].Width
			NEXT
		ENDWITH
		
		
		_rmt=IIF(PEMSTATUS(_screen,"Th_rmt",5),_screen.th_rmt,10)
		_rmf=IIF(PEMSTATUS(_screen,"Th_rmf",5),_screen.th_rmf,1)
		_bart=IIF(PEMSTATUS(_screen,"Th_bart",5),_screen.th_bart,20)
		_barf=IIF(PEMSTATUS(_screen,"Th_barf",5),_screen.th_barf,4)
		_adgr=IIF(PEMSTATUS(_screen,"Th_adgr",5),_screen.th_adgr,1)
		
		nRekMark=iif(lRecordMark,_rmt,_rmf)
		nBars=iif(lbars,_bart,_barf)
		
		xoGrid.width=nSumWidCol+nCantCol-1 + nRekMark + nBars + _adgr
		
		
	ENDPROC

	PROCEDURE wokupas
		lparameters xcTexto,xcFuente,xnTam,xcEstilo,xnAdd
		
		if Vartype(xcFuente)#"C"
			xcFuente="Arial"
		endif
		if Vartype(xnTam)#"N"
			xnTam=8
		endif
		if Vartype(xcEstilo)#"C"
			if Vartype(xcEstilo)="L"
				xcEstilo=iif(xcEStilo,"B","N")
			else
				xcEstilo="N"
			endif
		endif
		if Vartype(xnAdd)#"N"
			xnAdd=0
		endif
		nProm=FontMetric(6,xcFuente,xnTam,xcEstilo)
		nvtex=TxtWidth(xcTExto,xcFuente,xnTam,xcEstilo)*nProm
		if xnAdd=0
			xnAdd=Int(nvTex/20)
		endif
		Return xnAdd+nvTex
		
	ENDPROC

	PROCEDURE _getcalc
		*!*	Alternativa algo automatizada
		*!*	Levanta la calculadora general con la referencia _Screen.zCalcu2
		*!*	LOCAL obj
		*!*	obj=NEWOBJECT("gcalcu","thcalc")
		*!*	obj._getCalc()
		*!*	obj=null
		*!*	---------------------------------------------------------
		
		IF !PEMSTATUS(_screen,"zCalcu2",5)
			ADDPROPERTY(_screen,"zCalcu2",null)
		ENDIF
		
		IF VARTYPE(_screen.zCalcu2)="O"
			_screen.zCalcu2.WindowState=0
		ELSE
			_screen.zCalcu2=NEWOBJECT("FrmZCalcu2","thcalc")
		ENDIF
		_screen.zCalcu2.Show()
	ENDPROC

	PROCEDURE Check1.Click
		This.parent.Acomoda(this.value)
	ENDPROC

	PROCEDURE Check1.InteractiveChange
		
		
	ENDPROC

	PROCEDURE Check1.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.parent.aDevol,nKeyCode)>0
				This.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE Check1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Agrandar ó Achicar"
	ENDPROC

	PROCEDURE Check2.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.setfocus
		endif
	ENDPROC

	PROCEDURE Cmabre.Click
		This.parent.PutParen()
		
		
		
	ENDPROC

	PROCEDURE Cmabre.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE Cmabre.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Abrir Paréntesis"
	ENDPROC

	PROCEDURE CmBas.Click
			This.parent.Opera()
			Do case
			Case this.value=1
				This.Parent.signo="+"
			Case this.value=2
				This.Parent.signo="-"
		
			Case this.value=3
				This.Parent.signo="*"
		
			Case this.value=4
				This.Parent.signo="/"
			Endcase
			This.Parent.text3.refresh
			This.parent.aTeclop[5,2]=This.Parent.signo
			This.Parent.pbot.SetFocus
		
		
		
		
	ENDPROC

	PROCEDURE CmBas.Command1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.value="Operador "+this.caption
	ENDPROC

	PROCEDURE CmBas.Command2.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.value="Operador "+this.caption
	ENDPROC

	PROCEDURE CmBas.Command3.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.value="Operador "+this.caption
	ENDPROC

	PROCEDURE CmBas.Command4.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.value="Operador "+this.caption
	ENDPROC

	PROCEDURE CmBas.Init
		FOR i=1 TO this.ButtonCount
			this.Buttons(i).backColor = RGB(220,228,224)
		NEXT
	ENDPROC

	PROCEDURE CmBorrope.Click
		This.parent.limpiar()
	ENDPROC

	PROCEDURE CmBorrope.GotFocus
		This.parent.PutRaya(This)
	ENDPROC

	PROCEDURE CmBorrope.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmBorrope.LostFocus
		This.parent.PutRaya()
	ENDPROC

	PROCEDURE CmBorrope.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.value="Borrar Operación"
	ENDPROC

	PROCEDURE CmChar.Click
		This.parent.Quitacar()
	ENDPROC

	PROCEDURE CmChar.GotFocus
		This.parent.PutRaya(this)
	ENDPROC

	PROCEDURE CmChar.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmChar.LostFocus
		This.parent.PutRaya()
	ENDPROC

	PROCEDURE CmChar.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Quitar último número"
	ENDPROC

	PROCEDURE CmCierra.Click
		This.parent.QitParen()
		
	ENDPROC

	PROCEDURE CmCierra.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmCierra.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Cerrar Paréntesis"
	ENDPROC

	PROCEDURE CmClip.Click
		_CLIPTEXT = ltrim(str(This.Parent.Acum,14,This.Parent.nDezim))
		
		
	ENDPROC

	PROCEDURE CmClip.GotFocus
		This.parent.PutRaya(This)
	ENDPROC

	PROCEDURE CmClip.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmClip.LostFocus
		This.parent.PutRaya()
	ENDPROC

	PROCEDURE CmClip.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Enviar el resultado al Portapapeles"
	ENDPROC

	PROCEDURE cmdDownDecim.Click
		if This.Parent.ndezim>0
			This.Parent.ndezim=This.Parent.ndezim - 1
			This.parent.putdecimal()
		endif
	ENDPROC

	PROCEDURE cmdDownDecim.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE cmdDownDecim.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Reducir decimales."
	ENDPROC

	PROCEDURE CmDelEntry.Click
		This.parent.QuitEntra()
	ENDPROC

	PROCEDURE CmDelEntry.GotFocus
		This.parent.PutRaya(This)
	ENDPROC

	PROCEDURE CmDelEntry.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmDelEntry.LostFocus
		This.parent.PutRaya()
	ENDPROC

	PROCEDURE CmDelEntry.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Quitar entrada"
	ENDPROC

	PROCEDURE CmDelParen.Click
			With This.Parent
				.CmAbre.Visible=.t.
				.CmCierra.Visible=.f.
		
				.CmDelparen.visible=.f.
				.Stparen=""
				If .nparen#0
					.nparen=.nparen-1
				ENDIF
				.text6.value=.stparen
				*	.Text4.SetFocus
				.Cmbas.Setall("Enabled",.t.)
				.pbot.setfocus
			Endwith
			This.visible=.f.
		
		
	ENDPROC

	PROCEDURE CmDevol.Click
		This.parent.GetDevol()
		
	ENDPROC

	PROCEDURE CmDevol.GotFocus
		This.parent.PutRaya(This)
	ENDPROC

	PROCEDURE CmDevol.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmDevol.LostFocus
		This.parent.PutRaya()
	ENDPROC

	PROCEDURE CmDevol.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Devolver Resultado"
	ENDPROC

	PROCEDURE cmdUpDecim.Click
		if This.Parent.ndezim<8
			This.Parent.ndezim=This.Parent.ndezim+1
			This.parent.putdecimal()
		endif
		
		
	ENDPROC

	PROCEDURE cmdUpDecim.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE cmdUpDecim.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.value="Aumentar decimales."
	ENDPROC

	PROCEDURE CmEntry.Click
		if This.Parent.numero=0
			this.visible=.f.
		endif
		With This.Parent
			.Memoria1=.Numero
			.TxMem.Value=.Memoria1
			.pbot.setfocus
			.text9.value=len(.Cadena)	
		endwith
	ENDPROC

	PROCEDURE CmEntry.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE CmEntry.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Colocar Entrada en Memoria"
	ENDPROC

	PROCEDURE CmMas.Click
		With This.Parent
			.Memoria1=.Memoria1 + .Acum
			.TxMem.Value=.Memoria1
			if .Cancelop
				SELECT zcalcur
				ZAP
				.Grilla.refresh
				store 0 to .psolve1,.psolve2,.psolve3,.nparen,;
					.nitem,.numero,.acum
				store "" to .stParen,.Cadena
				.Signo="+"	
				.dezimac=.f.	
			*	.text4.value=""
			*	.Text2.Refresh
				.Text2.value=.Acum		
				.Text1.Value=.NUmero		
				.text7.refresh
				.text6.value=.stparen
				.cmDelParen.visible=.f.
				.text10.value=0
				.text8.value=0		
				.CmAbre.Visible=.t.
				.CmCierra.Visible=.f.
				.CmClip.Visible=.f.
				.refresh
			endif
			.text9.value=len(.Cadena)
			.pbot.setfocus
		endwith
	ENDPROC

	PROCEDURE CmMas.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE CmMas.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Sumar resultado en Memoria"
	ENDPROC

	PROCEDURE CmMenos.Click
		With This.Parent
			.Memoria1=.Memoria1 - .Acum
			.TxMem.Value=.Memoria1
			if .Cancelop
				SELECT zcalcur
				ZAP
				.Grilla.refresh	
				store 0 to .psolve1,.psolve2,.psolve3,.nparen,;
					.nitem,.numero,.acum
				store "" to .stParen,.Cadena
				.Signo="+"	
				.dezimac=.f.	
			*	.text4.value=""
		*		.Text2.Refresh
				.Text2.value=.Acum		
				.Text1.Value=.NUmero
				.text7.refresh
				.text6.value=.stparen
				.cmDelParen.visible=.f.
				.text10.value=0
				.text8.value=0		
				.CmAbre.Visible=.t.
				.CmCierra.Visible=.f.
				.CmClip.Visible=.f.
				.refresh
			endif
			.text9.value=len(.Cadena)	
			.pbot.setfocus
		endwith
	ENDPROC

	PROCEDURE CmMenos.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE CmMenos.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Restar resultado en Memoria"
	ENDPROC

	PROCEDURE CmNum.Click
			nbot=this.value
			Do case
			Case Between(nbot,1,9)
				cVal=This.Parent.CmNum.Buttons(nbot).caption
				This.parent.Agrega(cVal,.t.)
		
			Case nbot=11
				This.parent.Agrega("0",.t.)
		
			Case nbot=10
				*Punto
				With this.Parent
					If At(".",.Cadena)=0
						.Cadena=.Cadena+"."
					Endif
					.dezimac=.t.
					.text7.refresh
					.pbot.setfocus
				Endwith
			Case nbot=12
				*Cambio de Signo
				With this.parent
					.Numero=0-.Numero
					.Text1.Value=.numero
					.pbot.setfocus
				Endwith
		
			Endcase
		
	ENDPROC

	PROCEDURE CmNum.Command1.KeyPress
		Lparameters nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.Parent.aDevol,nKeyCode)>0
			This.Parent.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmNum.Command1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command10.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command10.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Punto Decimal"
		
	ENDPROC

	PROCEDURE CmNum.Command11.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command11.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command12.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.text14.Value="Invertir Signo Entrada"
	ENDPROC

	PROCEDURE CmNum.Command2.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command2.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command3.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command3.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command4.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command4.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command5.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command5.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command6.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command6.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command7.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command7.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command8.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command8.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Command9.KeyPress
			Lparameters nKeyCode, nShiftAltCtrl
			If Ascan(This.Parent.parent.aDevol,nKeyCode)>0
				This.Parent.Parent.pbot.SetFocus
			Endif
	ENDPROC

	PROCEDURE CmNum.Command9.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Número "+this.caption
	ENDPROC

	PROCEDURE CmNum.Init
		FOR i=1 TO this.ButtonCount
			this.Buttons(i).backColor = RGB(220,228,224)
		
		NEXT
		
	ENDPROC

	PROCEDURE CmRaiz.Click
		LOCAL nValor,nRaiz
		nValor=abs(This.Parent.Acum)
		nRAiz=Round(Sqrt(nValor),This.Parent.nDezim)
		do case
			case nValor>999999999
				cmasca="999,999,999,999"
			case nValor>999999
				cmasca="999,999,999"
			case nValor>999
				cmasca="999,999"
			other
				cmasca="9,999"
		endcase
		
		if This.Parent.nDezim>0
			cmasca=cmasca+"."+repli("9",This.Parent.nDezim)
		endif
		
		objImp=NEWOBJECT("TelImpor","thcalc","",;
				"Calculadora » Raíz Cuadrada",;
				"Valor",nRaiz,14,This.Parent.nDezim)
		objImp.show()
		IF _Screen.ThImpor=0
			RETURN
		ENDIF
		
		*!*	do form &dformu\telimpor with ;
		*!*		This.Parent.ACum,"Número:","Raíz Cuadrada","",;
		*!*			cmasca,This.Parent.nDezim,30,10,;
		*!*			"Raíz:",nRaiz,.t.,.f.,.t.
	ENDPROC

	PROCEDURE CmRaiz.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE CmRaiz.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Calcular Raíz Cuadrada"
	ENDPROC

	PROCEDURE CmRecalc.Click
		This.parent.reopera()
		
	ENDPROC

	PROCEDURE CmRecalc.GotFocus
		This.parent.PutRaya(This)
	ENDPROC

	PROCEDURE CmRecalc.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmRecalc.LostFocus
		This.parent.PutRaya()
	ENDPROC

	PROCEDURE CmRecalc.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Recalcular"
	ENDPROC

	PROCEDURE CmResEn.Click
		With This.Parent
			.Memoria1=.Memoria1-.NUmero
			.TxMem.Value=.Memoria1
			.pbot.setfocus
			.text9.value=len(.Cadena)	
		endwith
	ENDPROC

	PROCEDURE CmResEn.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE CmResEn.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Restar entrada en Memoria"
	ENDPROC

	PROCEDURE CmSumEn.Click
		With This.Parent
			.Memoria1=.Memoria1+.Numero
			.TxMem.Value=.Memoria1
			.pbot.setfocus
			.text9.value=len(.Cadena)	
		endwith
	ENDPROC

	PROCEDURE CmSumEn.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE CmSumEn.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Sumar entrada en Memoria"
	ENDPROC

	PROCEDURE CmTakas.Click
		*_CLIPTEXT = ltrim(str(This.Parent.Acum,14,This.Parent.nDezim))
		This.parent.getvalform()
		
	ENDPROC

	PROCEDURE CmTakas.GotFocus
		This.parent.PutRaya(This)
	ENDPROC

	PROCEDURE CmTakas.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmTakas.LostFocus
		This.parent.PutRaya()
	ENDPROC

	PROCEDURE CmTakas.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value=This.Parent.tooltake
	ENDPROC

	PROCEDURE CmTake.Click
		*_CLIPTEXT = ltrim(str(This.Parent.Acum,14,This.Parent.nDezim))
		nClipVal=0
		cClipval=FonlyNumer(Chrtran(_Cliptext,",","."))
		nClipVal=Round(Val(cClipVal),This.Parent.ndezim)	
		
		if nClipVal#0
			with this.parent
				.Numero=nClipVal
				cCadena=ltrim(str(nClipval,14,.ndezim))
				ctradec=Right(cCadena,.ndezim)
				if Val(cTradec)=0
					cCadena=ltrim(str(nClipVal))
				else
					for wi=.ndezim to 1 step-1
						if Right(cTradec,1)#"0"
							exit
						endif
						cTradec=Substr(cTradec,1,wi-1)
					next
					if empty(cTradec)
						cCadena=ltrim(str(nClipVal))
					else
						cCadena=ltrim(str(nClipval))+"."+ctradec
					endif
					
				endif
				.Dezimac=iif(At(".",cCadena)>0,.t.,.f.)
				.Cadena=cCAdena
				.Text1.Value=.numero
				.text7.refresh
				.pbot.SetFocus
		
			endwith
		endif
		
	ENDPROC

	PROCEDURE CmTake.GotFocus
		This.parent.PutRaya(This)
	ENDPROC

	PROCEDURE CmTake.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE CmTake.LostFocus
		This.parent.PutRaya()
	ENDPROC

	PROCEDURE CmTake.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Descargar del portapapeles (Pegar)"
		**This.Parent.tooltake
	ENDPROC

	PROCEDURE CntFun.lbcod.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.parent.Parent.Text14.value="Tecla acceso rápido"
	ENDPROC

	PROCEDURE CntFun.lbcuad.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.parent.Parent.Text14.value="Tecla acceso rápido"
	ENDPROC

	PROCEDURE CntFun.LbDevol.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.parent.Parent.Text14.value="Tecla acceso rápido"
	ENDPROC

	PROCEDURE CntFun.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.value="Accesibilidad"
	ENDPROC

	PROCEDURE Container1.Label1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Limpiar Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Limpiar Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container2.Label1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Sumar entrada en Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container2.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Sumar entrada en Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container3.Label1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Sumar resultado en Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container3.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Sumar resultado a Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container4.Label1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Restar resultado en Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container4.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Restar resultado a Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container5.Label1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.TEXT14.VALUE="Colocar Entrada en Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container5.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TEXT14.VALUE="Colocar Entrada en Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container6.Label1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Colocar Memoria en entrada (Deshabilitado)"
	ENDPROC

	PROCEDURE Container6.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Colocar Memoria en entrada (Deshabilitado)"
	ENDPROC

	PROCEDURE Container7.Label1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent.Text14.Value="Restar entrada en Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Container7.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Restar entrada en Memoria (Deshabilitado)"
	ENDPROC

	PROCEDURE Grilla.Click
		this.HighlightBackColor=RGB(0,64,128)
		
	ENDPROC

	PROCEDURE Grilla.DblClick
		LOCAL lRecalcu,tnDezim,cMask,lcRoot
		
		lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
		lRecalcu=.f.
		tndezim=This.Parent.ndezim
		cMask=this.column3.InputMask
		SELECT zcalcur
		nrec=RECNO()
		COUNT TO nCalCount
		IF nCalCount=0
			RETURN
		ENDIF
		
		GO nrec
		cCaption="Calculadora"
		cEdit="Desea quitar el número ó modificarlo?"
		cBot1="Modificar"
		cBot2="Quitar"
		*LPARAMETERS xcCaption,xcEdit,xcBoton1,xcBoton2,xnPref
		obCons=NEWOBJECT("FrmCons",lcRoot,"",cCaption,;
			cEdit,cBot1,cBot2,1)
		obCons.Show()
		
		nResp=_Screen.ThBoton
		REMOVEPROPERTY(_screen,"Thboton")
		RELEASE obCons
		
		Do case
			Case nresp=0
				Return
			Case nresp=1
				net=OCCURS("(",zCalcur.openpar)
					
				If net=0
					nVal=Zcalcur.importe
					cOper=TRIM(Zcalcur.signoper)
			
					objImp=NEWOBJECT("TelImpor",lcRoot,"",;
						"Calculadora » Importe",;
						"Valor",nVal,14,This.Parent.nDezim)
					objImp.show()
					IF _Screen.ThImpor=0
						RETURN
					ENDIF
					IF _Screen.thImpor#zCalcur.Importe
						SELECT zcalcur
						replace importe WITH _Screen.thImpor
						this.Refresh
						lRecalcu=.t.
					ENDIF
					REMOVEPROPERTY(_Screen,"ThImpor")
				Else
					cValorit=ALLTRIM(zCalcur.parentes)
					cKompa=PADL(cValorit,80,"1")
					nWi=This.parent.wokupas(cKompa,"Arial",8,"N")
					cwi=LTRIM(STR(nwi))
					Do while .t.
		*				cValorit=Padl(cValorit,80," ")
						lcCadena=cValorit
						lcLista="<value=&lcCadena/><Caption=Calculadora » Solve/>";
						+"<MaxLength=80/><label=Fórmula/>"
						lcMetodo=.f.
		
						pChain=NEWOBJECT("TelChain",lcRoot,"",Thisform,lcLista,lcMetodo)			
						pChain.Show()
						
		
						ctValor=ALLTRIM(_screen.ThCadena)
						RELEASE pchain
						REMOVEPROPERTY(_Screen,"ThCadena")
						
						If empty(ctvalor)
							Return
						Endif
						nabre=Occurs("(",ctvalor)
						ncier=Occurs(")",ctvalor)
		
						If nabre#ncier
							Messagebox("Error en cantidad de paréntesis";
								+ltrim(str(nabre))+" abiertos.";
								+ltrim(str(ncier))+" cerrados.",0,TH_MENSAJE)
						Else
							Do while .t.
								nCas=0
								For mi=1 to alen(This.parent.aDoble)
									nd=AT(This.parent.aDoble[mi],ctvalor)
									If nd#0
										nCas=nCas+1
										cremp=left(This.parent.aDoble[mi],1)
										ctvalor=StrTRan(ctvalor,This.parent.aDoble[mi],cremp)
									Endif
								Next
								If nCas=0
									Exit
								Endif
							Enddo
							Exit
						Endif
					Enddo
					IF ctValor # ALLTRIM(zcalcur.parentes)
						SELECT zcalcur
						replace parentes WITH ctValor,;
							importe WITH EVALUATE(ctValor)
						lRecalcu=.t.
					ENDIF
						
				Endif
			Case nresp=2
				nCalCount=nCalCount-1
				SELECT zcalcur
				DELETE
				lRecalcu=.t.
				
				
		ENDCASE
		IF lREcalcu
			This.parent.reopera()
		ENDIF
		
		
	ENDPROC

	PROCEDURE Grilla.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE Grilla.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.value="Doble click para cambiar ó quitar"
	ENDPROC

	PROCEDURE Image10.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Quitar entrada (Deshabilitado)"
	ENDPROC

	PROCEDURE Image11.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Recalcular (Deshabilitado)"
	ENDPROC

	PROCEDURE Image2.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.value="Borrar (Deshabilitado)"
	ENDPROC

	PROCEDURE Image3.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value=This.Parent.tooltake+" (Deshabilitado)"
	ENDPROC

	PROCEDURE Image4.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Devolver Resultado (Deshabilitado)"
	ENDPROC

	PROCEDURE Image5.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Pegar (Deshabilitado)"
	ENDPROC

	PROCEDURE Image6.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Copiar (Deshabilitado)"
	ENDPROC

	PROCEDURE Image7.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Abrir Paréntesis (Deshabilitado)"
	ENDPROC

	PROCEDURE Image8.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Cerrar Paréntesis (Deshabilitado)"
	ENDPROC

	PROCEDURE Image9.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.Value="Quitar último número (Deshabilitado)"
	ENDPROC

	PROCEDURE Label1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.value="Cantidad de Items Ingresados."
	ENDPROC

	PROCEDURE MemClin.Click
		With This.Parent
			.Memoria1=0
			.TxMem.Value=.Memoria1
			.pbot.setfocus
		*	.text9.value=len(.Cadena)	
			.CmEntry.Visible=!EMPTY(.numero)
			.CmMas.Visible=!EMPTY(.Acum)
			.CmMenos.Visible=!EMPTY(.Acum)
		endwith
	ENDPROC

	PROCEDURE MemClin.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE MemClin.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Limpiar Memoria"
	ENDPROC

	PROCEDURE MemRes.Click
		
		if This.Parent.Memoria1#0
			with This.Parent
				.Numero=.memoria1
				nClipVal=.Memoria1
				cCadena=ltrim(str(nClipval,14,.ndezim))
				ctradec=Right(cCadena,.ndezim)
				if Val(cTradec)=0
					cCadena=ltrim(str(nClipVal))
				else
					for wi=.ndezim to 1 step-1
						if Right(cTradec,1)#"0"
							exit
						endif
						cTradec=Substr(cTradec,1,wi-1)
					next
					if empty(cTradec)
						cCadena=ltrim(str(nClipVal))
					else
						cCadena=ltrim(str(nClipval))+"."+ctradec
					endif
					
				endif
				.Dezimac=iif(At(".",cCadena)>0,.t.,.f.)
				.Cadena=cCAdena
				.Text1.Value=.NUmero
				.text7.refresh
				.opera()
				.pbot.SetFocus		
			endwith
		ENDIF
		
		with This.Parent
			.text9.value=len(.Cadena)
			.pbot.setfocus
		endwith
		
	ENDPROC

	PROCEDURE MemRes.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		if Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		endif
	ENDPROC

	PROCEDURE MemRes.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Colocar Memoria como Entrada"
	ENDPROC

	PROCEDURE pbot.GotFocus
		This.Parent.Grilla.HighlightBackColor=rgb(153,171,174)
	ENDPROC

	PROCEDURE Shape7.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.Value="Memoria"
	ENDPROC

	PROCEDURE Text1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Valor ingresado."
	ENDPROC

	PROCEDURE Text1.ProgrammaticChange
		with this.parent
			.CmChar.Visible=!empty(this.value)
			.CmDelEntry.Visible=!empty(this.value)
			.CmEntry.Visible=iif(!empty(.Memoria1),.t.,!empty(this.value))
			.CmSumEn.Visible=!empty(this.value)
			.CmResEn.Visible=!Empty(this.value)
		endwith
	ENDPROC

	PROCEDURE Text10.Valid
		This.value=alltrim(this.value)
	ENDPROC

	PROCEDURE Text11.Valid
		This.value=alltrim(this.value)
	ENDPROC

	PROCEDURE Text14.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.value="Texto de Ayuda"
	ENDPROC

	PROCEDURE Text2.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.value="Resultado de la operación."
	ENDPROC

	PROCEDURE Text2.ProgrammaticChange
		with this.parent
			*.CmMemo.Enabled=!empty(this.value)
			.CmMas.visible=!empty(this.value)
			.Cmmenos.visible=!empty(this.value)
		*	.CmMemo.visible=!empty(this.value)
			.CmRaiz.visible=!empty(this.value)
		endwith
	ENDPROC

	PROCEDURE Text2.Valid
		This.value=alltrim(this.value)
	ENDPROC

	PROCEDURE Text3.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.text14.value="Operación aritmética en curso."
	ENDPROC

	PROCEDURE Text3.Valid
		This.value=alltrim(this.value)
	ENDPROC

	PROCEDURE Text6.KeyPress
		Lparameters nKeyCode, nShiftAltCtrl
		If Ascan(This.parent.aDevol,nKeyCode)>0
			This.Parent.pbot.SetFocus
		Endif
	ENDPROC

	PROCEDURE Text6.ProgrammaticChange
		This.Parent.text14.Visible=IIF(This.Parent.estirar,EMPTY(this.Value),.f.)
		this.Visible=!EMPTY(this.Value)
	ENDPROC

	PROCEDURE Text7.Valid
		This.value=alltrim(this.value)
	ENDPROC

	PROCEDURE Text8.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Text14.value="Cantidad de Items Ingresados."
	ENDPROC

	PROCEDURE Text8.ProgrammaticChange
		with this.parent
			.CntFun.LbCod.ForeColor=iif(this.value=0,Rgb(128,128,128),;
				Rgb(0,0,0))
			.CmBorrope.Visible=!empty(this.value)
			.CmRecalc.visible=!empty(this.value)
		endwith
	ENDPROC

	PROCEDURE Text9.ProgrammaticChange
		with This.Parent
			.CntFun.LbCuad.ForeColor=iif(this.value=0,Rgb(128,128,128),;
				Rgb(0,0,0))
			.CmNum.Command12.Enabled=!empty(this.value)
		endwith
	ENDPROC

	PROCEDURE TxDezim.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.TExt14.Value="Cantidad de decimales."
	ENDPROC

	PROCEDURE TxDezim.Valid
		This.value=alltrim(this.value)
	ENDPROC

	PROCEDURE TxMem.ProgrammaticChange
		with This.Parent
			.Memres.Visible=!empty(this.value)
			.MemClin.Visible=!EMPTY(this.Value)
			.Label2.ForeColor=iif(!empty(this.value),rgb(0,0,0),rgb(128,128,128))
			.TxMem.DisabledForeColor=iif(!empty(this.value),rgb(0,0,0),rgb(128,128,128))
		endwith
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmcons AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Edit1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmg1" UniqueID="" Timestamp="" />

	AutoCenter = .T.
	BackColor = 207,218,215
	Caption = "Form"
	DoCreate = .T.
	Height = 110
	Icon = ..\graphics\fibona5inv.ico
	MaxButton = .F.
	MinButton = .F.
	Name = "frmcons"
	ShowTips = .T.
	ShowWindow = 1
	Width = 275
	WindowType = 1

	ADD OBJECT 'Cmg1' AS cmg WITH ;
		Left = 68, ;
		Name = "Cmg1", ;
		Top = 75, ;
		Command1.Left = 4, ;
		Command1.Name = "Command1", ;
		Command1.Top = 4, ;
		Command2.Left = 65, ;
		Command2.Name = "Command2", ;
		Command2.Top = 4
		*< END OBJECT: ClassLib="thcalc.vcx" BaseClass="commandgroup" />

	ADD OBJECT 'Edit1' AS editbox WITH ;
		BackStyle = 1, ;
		BorderColor = 114,136,141, ;
		BorderStyle = 1, ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 60, ;
		Left = 6, ;
		Name = "Edit1", ;
		ScrollBars = 0, ;
		SpecialEffect = 1, ;
		Top = 6, ;
		Width = 260
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 221,226,222, ;
		Height = 68, ;
		Left = 3, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 3, ;
		Width = 268
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Init
		LPARAMETERS xcCaption,xcEdit,xcBoton1,xcBoton2,xnPref
		local lcRoot
		lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
		ADDPROPERTY(_Screen,"ThBoton",0)
		thisform.NewObject("cmdClose1","cmdClose",lcRoot)
		
		IF VARTYPE(xcEdit)#"C"
			xcEdit=""
		ENDIF
		IF VARTYPE(xcBoton1)#"C".or.empty(xcBoton1)
			xcBoton1="Aceptar"
		ENDIF
		IF VARTYPE(xcBoton2)#"C".or.empty(xcBoton1)
			xcBoton2="Cancelar"
		ENDIF
		IF VARTYPE(xnPref)#"N".or.empty(xnPref)
			xnPref=1
		ENDIF
		
		WITH this
			.Caption=xcCaption
			.Edit1.Value=xcEdit
			.Cmg1.Buttons(1).Caption="\<"+PROPER(xcBoton1)
			.Cmg1.Buttons(2).Caption="\<"+PROPER(xcBoton2)
			.cmdClose1.visible=.t.
		ENDWITH
		xTexto=ALLTRIM(This.Edit1.Value)
		Dimension aFrase(1)
		thisform.gCalcu1.SeparText(xTexto,This.Edit1.Width,@aFrase,2)
		WITH Thisform
			.Edit1.Height=Alen(aFrase)*18+2
			.Shape1.height=(.Edit1.top-.Shape1.Top)*2+.Edit1.Height+2
		ENDWITH
		
		Thisform.gCalcu1.gStandar("Shape1",,.t.)
		IF xnPref=2
			Thisform.Cmg1.Buttons(xnPref).setFocus
		ENDIF
		
	ENDPROC

	PROCEDURE Cmg1.Command1.Click
		_Screen.thBoton=1
		thisform.Release
	ENDPROC

	PROCEDURE Cmg1.Command2.Click
		_Screen.thBoton=2
		thisform.Release
	ENDPROC

ENDDEFINE

DEFINE CLASS frmzcalcu AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: acum
		*p: cadena
		*p: cancelop
		*p: confstat
		*p: dezimac
		*p: estirar
		*p: memoria1
		*p: ndezim
		*p: nitem
		*p: npacie
		*p: nparen
		*p: numero
		*p: olddecimal
		*p: plista
		*p: psolve1
		*p: psolve2
		*p: psolve3
		*p: rcparen
		*p: savedezim
		*p: signo
		*p: stparen
		*p: tooltake
	*</DefinedPropArrayMethod>

	acum = .F.
	AlwaysOnTop = .T.
	BackColor = 200,213,209
	cadena = .F.
	cancelop = .F.
	Caption = "Theodore Calculadora"
	confstat = .F.
	dezimac = .F.
	DoCreate = .T.
	estirar = .F.
	Height = 285
	Icon = ..\graphics\zcalcu.ico
	KeyPreview = .T.
	Left = 0
	MaxButton = .F.
	memoria1 = .F.
	Name = "frmzcalcu"
	ndezim = .F.
	nitem = .F.
	npacie = .F.
	nparen = .F.
	numero = .F.
	olddecimal = .F.
	plista = .F.
	psolve1 = .F.
	psolve2 = .F.
	psolve3 = .F.
	rcparen = .F.
	savedezim = .F.
	ShowWindow = 1
	signo = .F.
	stparen = .F.
	tooltake = .F.
	Top = 0
	Width = 354
	
	PROCEDURE Destroy
		LOCAL cConfStat
		this.CntCalcu1.SaveCust(this)
		cConfStat=Thisform.ConfStat
		SET CONFIRM &cConfStat
		
	ENDPROC

	PROCEDURE GotFocus
		LOCAL ldoit,lCmDevol,lGenasie,ToolCmTake,cMask
		ldoit=.t.
		lCmDevol=IIF(VARTYPE(THIS.CntCalcu1.FOrmcall)="O",.t.,.f.)
		
		lGenasie=.f.
		
		IF VARTYPE(THIS.CntCalcu1.FOrmcall)="O";
			 AND VARTYPE(this.CntCalcu1.objref)="O"
			lDoit=.f.
			lGenasie=.t.
			ToolcmTake="Tomar el importe de origen"
		ELSE
			LDOIT=.T.
			toolCmTake="Tomar Importe (Deshabilitado)"
		ENDIF
		
		WITH THIS.CntCalcu1
			if ldoit
				.CmTake.Visible=iif(Val(_ClipTExt)#0,.t.,.f.)
			ENDIF
			
			.CmDevol.Visible=lCmDevol
			.CmTakas.Visible=lGenasie
			.Tooltake=toolcmTake
			cMask="9,999,999,999."+repli("9",.ndezim)
			.text1.InputMask=cMask
			.text2.Inputmask=cMask
			.txdezim.refresh	
		ENDWITH
		
	ENDPROC

	PROCEDURE Init
		PARAMETERS xnWin,xoFormCall,xoObjRef,xlCapture,xcMetodo,xnDecimal
		LOCAL nat,i,lcDecimalPart,lcNueve,lcRoot
		lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
		
		thisform.NewObject("CntCalcu1","CntCalcu",lcRoot)
		
		
		this.CntCalcu1.visible=.t.
		
		IF VARTYPE(xnWin)#"N"
			xnWin=0
		ENDIF
		IF VARTYPE(xoformCall)#"O"
			xoFormCall=null
		ENDIF
		IF VARTYPE(xoObjRef)#"O"
			xoObjRef=Null
		ENDIF
		IF VARTYPE(xcMetodo)#"C"
			xcMetodo=""
		ENDIF
			
		this.CntCalcu1.readcust(this)
		
		IF VARTYPE(xnDecimal)="N".and.Between(xnDecimal,0,8)
			WITH this.CntCalcu1
				.NDEzim=xnDecimal
				.savedezim=.F.
			ENDWITH
			
		ELSE
			IF !ISNULL(xoObjREf)
				nat=AT(".",xoObjRef.InputMask)
				IF nat>0
					lcDecimalPart=SUBSTR(xoObjRef.InputMask,nat+1)
					lcNueve=""
					FOR i=1 TO LEN(lcDecimalpart)
						IF SUBSTR(lcDecimalPart,i,1)="9"
							lcNueve=lcNueve+"9"
						ENDIF
					NEXT
					WITH this.CntCalcu1
						.ndezim=LEN(lcNueve)
						.savedezim=.f.
					ENDWITH
					
				ENDIF
			ENDIF
		ENDIF
		
		Thisform.CONFSTAT=SET("CONFIRM")
		set CONFIRM ON
		
		toolcmtake="Descargar del portapapeles (Pegar)"
		
		WITH this.CntCalcu1
			.fORMcALL=xoFormCall
			.objREf=xoObjRef
			.Metodo=xcMetodo
		ENDWITH
		Thisform.CntCalcu1.getgrilla()
		with thisform
			.Windowtype=xnwin
			.Minbutton=iif(xnwin=0,.t.,.f.)
		ENDWITH
		WITH this.CntCalcu1
			.Acomoda(.estirar)
			.limpiar()	
			.CmCierra.Visible=.f.
			.text2.value=.Acum
			.text3.ControlSource='Thisform.CntCalcu1.Signo'
			.Text1.Value=.numero
			.txdezim.ControlSource='Thisform.CntCalcu1.ndezim'
			.text7.controlSource='Thisform.CntCalcu1.cadena'
			.Text1.InputMask=.numforma
			.Text2.inputMask=.NumForma
			.CmDelparen.visible=.f.
			.text11.Controlsource='Thisform.CntCalcu1.psolve1'
			.TxMem.Value=.Memoria1
			.CmClip.Visible=.f.
			.check1.ControlSource='Thisform.CntCalcu1.Estirar'
			.CmTake.Visible=iif(Val(_ClipTExt)#0,.t.,.f.)
			.Check2.ControlSource='Thisform.CntCalcu1.Cancelop'
		
		ENDWITH
		
		IF xlCapture
			This.CntCalcu1.getvalform()
			this.CntCalcu1.opera()
		ENDIF
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If ascan(thisform.CntCalcu1.aDevol,nKeyCode)=0
			Return
		Endif
		With thisform.CntCalcu1
			.Text10.Value=nKeyCode
			If Between(nKeyCode,48,57)
				If .rcparen
					Messagebox("Escriba un símbolo de operación antes que el número.",0,TH_MENSAJE)
				Else
					.Agrega(chr(nKeyCode))
				Endif
				If .nparen<3
					.CmAbre.Visible=.t.
				Endif
				If .nparen>0
					.CmCierra.Visible=.t.
				Endif
				.Cmbas.Setall("Enabled",.t.)
			Else
				.rcparen=.f.
				nas=ascan(.aTeclop,nKeyCode)
				If nas#0
					.Opera()
					.signo=thisform.CntCalcu1.aTeclop[nas+1]
					.text3.refresh
					.aTeclop[5,2]=thisform.CntCalcu1.aTeclop[nas+1]
				Else
					Do case
					Case nKeyCode=40
		*				.CmAbre.click
						.PutParen()
					Case nKeyCode=41
		*				.cmCierra.click
						.QitParen()
					Case nKeyCode=46
						.dezimac=.t.
						If At(".",.Cadena)=0
							.Cadena=.Cadena+"."
							.text7.refresh
						Endif
					Case nKeyCode=127
						.Quitacar()
					Case nKeyCode=7
						.Quitacar()
					case nKeyCode=-7
						.limpiar()
					case nkeyCode=-4
						.QuitEntra()
					case Inlist(nkeyCode,122,90,134)
						if .CmDevol.Enabled
							.GetDevol()
						endif
						
					Endcase
				Endif
			Endif
		Endwith
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.CntCalcu1.Text14.Value=""
	ENDPROC

ENDDEFINE

DEFINE CLASS frmzcalcu2 AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: acum
		*p: cadena
		*p: cancelop
		*p: confstat
		*p: dezimac
		*p: estirar
		*p: memoria1
		*p: ndezim
		*p: nitem
		*p: npacie
		*p: nparen
		*p: numero
		*p: olddecimal
		*p: plista
		*p: psolve1
		*p: psolve2
		*p: psolve3
		*p: rcparen
		*p: savedezim
		*p: signo
		*p: stparen
		*p: tooltake
	*</DefinedPropArrayMethod>

	acum = .F.
	AlwaysOnTop = .T.
	BackColor = 200,213,209
	cadena = .F.
	cancelop = .F.
	Caption = "Theodore Calculadora"
	confstat = .F.
	dezimac = .F.
	DoCreate = .T.
	estirar = .F.
	Height = 296
	Icon = ..\graphics\zcalcu.ico
	KeyPreview = .T.
	Left = 0
	MaxButton = .F.
	memoria1 = .F.
	Name = "frmzcalcu2"
	ndezim = .F.
	nitem = .F.
	npacie = .F.
	nparen = .F.
	numero = .F.
	olddecimal = .F.
	plista = .F.
	psolve1 = .F.
	psolve2 = .F.
	psolve3 = .F.
	rcparen = .F.
	savedezim = .F.
	ShowWindow = 2
	signo = .F.
	stparen = .F.
	tooltake = .F.
	Top = 0
	Width = 323
	
	PROCEDURE Destroy
		LOCAL cConfStat
		this.CntCalcu1.SaveCust(this)
		cConfStat=Thisform.ConfStat
		SET CONFIRM &cConfStat
		
	ENDPROC

	PROCEDURE GotFocus
		LOCAL ldoit,lcmDevol,lGEnasie,cmask
		ldoit=.t.
		lCmDevol=IIF(VARTYPE(THIS.CntCalcu1.FOrmcall)="O",.t.,.f.)
		
		lGenasie=.f.
		
		IF VARTYPE(THIS.CntCalcu1.FOrmcall)="O";
			 AND VARTYPE(this.CntCalcu1.objref)="O"
			lDoit=.f.
			lGenasie=.t.
			ToolcmTake="Tomar el importe de origen"
		ELSE
			LDOIT=.T.
			toolCmTake="Tomar Importe Deshabilitado"
		ENDIF
		WITH this.CntCalcu1
			if ldoit
				.CmTake.Visible=iif(Val(_ClipTExt)#0,.t.,.f.)
			ENDIF
			
			.CmDevol.Visible=lCmDevol
			.CmTakas.Visible=lGenasie
			.Tooltake=toolcmTake
			cMask="9,999,999,999."+repli("9",.ndezim)
			.text1.InputMask=cMask
			.text2.Inputmask=cMask
			.txdezim.refresh	
		ENDWITH
	ENDPROC

	PROCEDURE Init
		LOCAL nat,i,lcDecimalPart,lcNueve 
		LOCAL xnTop,xnLeft,xlCApture,obj,lnHand,lcGet,lcRoot
		lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
		
		thisform.NewObject("CntCalcu1","CntCalcu",lcRoot)
		
		
		this.CntCalcu1.Visible=.t.
		this.CntCalcu1.readcust(this)
		
		Thisform.CONFSTAT=SET("CONFIRM")
		set CONFIRM ON
		Thisform.CntCalcu1.getgrilla()
		
		WITH this.cntCalcu1
			.Acomoda(.estirar)
			.limpiar()	
			.CmCierra.Visible=.f.
			.text2.value=.Acum
			.text3.ControlSource='Thisform.CntCalcu1.Signo'
			.Text1.Value=.numero
			.txdezim.ControlSource='Thisform.CntCalcu1.ndezim'
			.text7.controlSource='Thisform.CntCalcu1.cadena'
			.Text1.InputMask=.numforma
			.Text2.inputMask=.NumForma
			.CmDelparen.visible=.f.
			.text11.Controlsource='Thisform.CntCalcu1.psolve1'
			.TxMem.Value=.Memoria1
			.CmClip.Visible=.f.
			.check1.ControlSource='Thisform.CntCalcu1.Estirar'
			.CmTake.Visible=iif(Val(_ClipTExt)#0,.t.,.f.)
			.CmTake.tooltiptext="Descargar del portapapeles (Pegar)"
			.Check2.ControlSource='Thisform.CntCalcu1.Cancelop'
		
		
		ENDWITH
		
		IF xlCapture
			This.CntCalcu1.getvalform()
			this.CntCalcu1.opera()
		ENDIF
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If ascan(thisform.CntCalcu1.aDevol,nKeyCode)=0
			Return
		Endif
		With thisform.CntCalcu1
			.Text10.Value=nKeyCode
			If Between(nKeyCode,48,57)
				If .rcparen
					Messagebox("Escriba un símbolo de operación antes que el número.",0,TH_MENSAJE)
				Else
					.Agrega(chr(nKeyCode))
				Endif
				If .nparen<3
					.CmAbre.Visible=.t.
				Endif
				If .nparen>0
					.CmCierra.Visible=.t.
				Endif
				.Cmbas.Setall("Enabled",.t.)
			Else
				.rcparen=.f.
				nas=ascan(.aTeclop,nKeyCode)
				If nas#0
					.Opera()
					.signo=thisform.CntCalcu1.aTeclop[nas+1]
					.text3.refresh
					.aTeclop[5,2]=thisform.CntCalcu1.aTeclop[nas+1]
				Else
					Do case
					Case nKeyCode=40
		*				.CmAbre.click
						.PutParen()
					Case nKeyCode=41
		*				.cmCierra.click
						.QitParen()
					Case nKeyCode=46
						.dezimac=.t.
						If At(".",.Cadena)=0
							.Cadena=.Cadena+"."
							.text7.refresh
						Endif
					Case nKeyCode=127
						.Quitacar()
					Case nKeyCode=7
						.Quitacar()
					case nKeyCode=-7
						.limpiar()
					case nkeyCode=-4
						.QuitEntra()
					case Inlist(nkeyCode,122,90,134)
						if .CmDevol.Enabled
							.GetDevol()
						endif
						
					Endcase
				Endif
			Endif
		Endwith
			
		
		
	ENDPROC

	PROCEDURE Load
		with thisform
			.Cancelop=.t.
			.estirar=.t.
			.nDezim=2
			.OldDecimal=2
			store 0 to .acum,.numero,.NItem,;
			.psolve1,.psolve2,.psolve3,.nparen,.npacie,.memoria1
			store "" to .stParen,.Cadena
			.Signo="+"
			.SaveDezim=.t.
		ENDWITH
		
		
		
		
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		Thisform.CntCalcu1.Text14.Value=""
	ENDPROC

ENDDEFINE

DEFINE CLASS gcalcu AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: agrega
		*m: detmask
		*m: fonlydigit
		*m: formublok
		*m: getfopen
		*m: getvalform
		*m: getvaltag
		*m: greenlines
		*m: grgotfocus
		*m: grlostfocus
		*m: gstandar
		*m: limpiar
		*m: micurdir
		*m: opermat
		*m: putdecimal
		*m: putparen
		*m: putraya
		*m: puttag
		*m: qitparen
		*m: quitacar
		*m: quitentra
		*m: reopera
		*m: separtext
		*m: showerror
		*m: teldecim
		*m: thcentrar
		*m: widgrid
		*m: wokupas
		*p: formcall
		*p: metodo
		*p: numforma
		*p: numspa
		*p: objref
	*</DefinedPropArrayMethod>

	formcall = .F.
	metodo = .F.
	Name = "gcalcu"
	numforma = .F.
	numspa = .F.
	objref = .F.
	Width = 40
	
	PROCEDURE agrega
		lparameters xcnValor,xlfoco
		Thc_nv=Val(xcnValor)
		Thc_ndz=Thisform.ndezim
		Thc_ncd=10^Thc_ndz
		with thisform
			if .dezimac
				nLenCadena=Len(.Cadena)
				nAtpunto=At(".",.cadena)
				Thc_cColdec=Substr(.Cadena,nAtpunto+1)
				if empty(Thc_cColdec)
					Thc_nde=10
					*Thc_nadd=Thc_nv*10^(Thc_ndz-1)
					Thc_nadd=Thc_nv
					*Thc_ncd
				
				else
					Thc_nde=10^(Len(Thc_cColdec)+1)
					Thc_nColdec=Val(Thc_cColdec)
					Thc_nadd=Thc_nColdec*10+Thc_nv
				
				
				endif
				.Numero=Int(.Numero)+ Thc_nadd/Thc_nde
			else
				.numero=.Numero*10+Thc_nv
				
			endif
			.Cadena=.cadena+xcnValor
			.Text1.Value=.numero
			.text7.refresh
			.text9.value=len(.cadena)	
		*	if xlfoco
		*		.TExt4.Setfocus
		*	endif
		endwith
	ENDPROC

	PROCEDURE detmask
		lparameters nAncho,nDecimal,xrancho,xnLim
		********************************
		* Determina la composición de una
		* máscara de formato numérico
		* xRancho se utiliza para devolver la 
		* cantidad de caracteres del formato
		* p.e.:
		* lnformaLen=0
		* This.DetMask(12,2,@LnFormaLen)
		* ?lnFormaLen
		********************************
		LOCAL cFormato,i_,nResto,nRep,nlen,cdec
		if vartype(xnLim)#"N".or.Empty(xnLim)
			xnLim=14
		endif
		if nAncho>xnLim
			nAncho=xnLim
		endif
		cFormato=""
		xRancho=0
		if nDecimal>0
			wAncho=nAncho-(nDecimal+1)
		else
			wAncho=nAncho
		endif
		
		nResto= Mod(wAncho,3)
		if nREsto=0
			nrep=wAncho/3
			*xCar=Repli("9",nrep)
			For i_=1 to nRep
				if i_<nRep
					cFormato=cFormato+"999,"
				else
					cFormato=cFormato+"999"
				endif
			next
		else
			wAncho=wAncho-nResto
			nrep=wAncho/3
			cFormato=Repli("9",nResto)+","
			For i_=1 to nRep
				if i_<nRep
					cFormato=cFormato+"999,"
				else
					cFormato=cFormato+"999"
				endif
			next
		endif
		nLen=Len(cFormato)
		if Substr(cFormato,nlen,1)=","
			cFormato=Substr(cFormato,1,nlen-1)
		endif
		if nDecimal>0
			cDec=Repli("9",nDEcimal)
			cFormato=cFormato+"."+cDec
		endif
		xRancho=Len(cFormato)
		return cFormato
		
	ENDPROC

	PROCEDURE fonlydigit
		lparameters xlcCadena,xcExcep
		******************************
		** Luis María Guayan
		** Devuelve únicamente los números que contiene una cadena
		LOCAL lcCompare
		IF VARTYPE(xcExcep)#"C"
			xcExcep=""
		ENDIF
		lcCompare="1234567890"+xcExcep
		return CHRTRAN(xlcCadena,CHRTRAN(xlcCadena,lcCompare,""),"")
	ENDPROC

	PROCEDURE formublok
		lparameters xlFija
		with thisform
			.MaxWidth=iif(xlFija,.Width,-1)
			.MinWidth=iif(xlFija,.Width,-1)
			.MaxHeight=iif(xlFija,.Height,-1)
			.MinHeight=iif(xlFija,.Height,-1)
		endwith
	ENDPROC

	PROCEDURE getfopen
		LPARAMETERS xcFile,xnHandler,xlNotVerb,xnPrivileg,xlOpenEmpty
		**************************************************************
		*!*	Objeto: abrir un archivo con FOPEN()
		*!*	xcFile:    	Ruta y Nombre de archivo completo que se intenta abrir
		*!*				Se puede pasar como xcfile+"<eof/>" 
		*!*				para que quede en EOF()
		*!*	xnHandler: @ Handler pasado por referencia
		*!*	xlNotVerb: suprime comentarios si es .t.
		*!*	xnPrivileg, may be:
		*!*		0 Read Only Buffer
		*!*	 	1 Write ONly Buffer
		*!*	 	2 Read Write Buffer
		*!*	 	10 Read Only No Buffer
		*!*	 	11 Write ONly No Buffer
		*!*	 	12 Read Write No Buffer
		*!*	xlOpenEmpty: Valida la apertura de un archivo vacío
		*!* --------------------------------------------------------------
		*!*	IF !This.GetFopen(addbs(lcRoot)+"archivo.txt",@nfop,.F.,12)
		*!*		RETURN
		*!*	ENDIF
		*!* --------------------------------------------------------------
		
		local lRet,gnEnd,gnTop,nat,lcTag
		lREt=.t.
		STORE "" TO lcTag
		IF EMPTY(xcfile)
			IF !xlNotVerb
				MESSAGEBOX("Nombre de archivo vacío",0,"GetFopen Message")
			ENDIF
			RETURN .F.
		ENDIF
		nat=AT("<",xcFile)
		IF nat > 0
			lcTag=LOWER(TRIM(SUBSTR(xcFile,nat)))
			xcFile=LEFT(xcfile,nat-1)
		ENDIF
		
		IF !file(xcFile)
			if !xlNotVerb
				MESSAGEBOX("El archivo &xcFile no existe",0,"GetFopen Message")
			endif
			RETURN .F.
		endif
		if vartype(xnPrivileg)#"N"
			xnPrivileg=0
		ENDIF
		IF !INLIST(xnPrivileg,0,1,2,10,11,12)
			xnPrivileg=12
		ENDIF
		
		xnHandler=fopen(xcFile,xnPrivileg)
		if xnHandler=-1
			if !xlNotVerb
				MESSAGEBOX("El archivo &xcFile no pudo abrirse",0,"GetFopen Message")
			ENDIF
			RETURN .F.
		ENDIF
		gnEnd=Fseek(xnHandler,0,2)
		IF EMPTY(lcTag) OR lcTag#"<eof/>"
			gntop=Fseek(xnHandler,0)	
		ENDIF
		
		IF !xlOpenEmpty AND gnEnd<=0
			if !xlnotVerb
				MESSAGEBOX("El archivo &xcFile no tiene contenido",0,"GetFopen Message")
			endif
			FCLOSE(xnHandler)
			lRet=.f.
		ENDIF
		
		RETURN lret
		
	ENDPROC

	PROCEDURE getvalform
		nClipVal=0
		
		IF !ISNULL(this.formcall)
			IF !ISNULL(this.objref)
				obRef=this.objref
				nClipVal=this.objRef.Value
			ENDIF
		ENDIF
		
		if nClipVal#0
			with thisform
				.Numero=nClipVal
				cCadena=ltrim(str(nClipval,14,.ndezim))
				ctradec=Right(cCadena,.ndezim)
				if Val(cTradec)=0
					cCadena=ltrim(str(nClipVal))
				else
					for wi=.ndezim to 1 step-1
						if Right(cTradec,1)#"0"
							exit
						endif
						cTradec=Substr(cTradec,1,wi-1)
					next
					if empty(cTradec)
						cCadena=ltrim(str(nClipVal))
					else
						cCadena=ltrim(str(nClipval))+"."+ctradec
					endif
					
				endif
				.Dezimac=iif(At(".",cCadena)>0,.t.,.f.)
				.Cadena=cCAdena
				.Text1.Value=.numero
				.text7.refresh
				.Grilla.HighlightBackColor=rgb(153,171,174)
			endwith
		endif
		
	ENDPROC

	PROCEDURE getvaltag
		LPARAMETERS xcTag,xlReturnObj
		**************************************
		* PROCEDURE getValTag(xcTag,xlReturnObj)
		**************************************
		* Etiquetas calificadas ( <NOMBRE|N|1250.12/>  )
		*-----------------------------------------------
		* Si xlREturnObj=.F. (Default)
		* 	Devuelve el valor de una etiqueta
		*	lcTag="<ESTADO|L|.T./>
		*	? GetValTag(lcTag)	&& muestra .T.
		*
		* Si xlReturnObj= .T.
		*	Devuelve la referencia a un objeto "empty"
		*	con tres propiedades: Tag, Value y Type
		*
		*	lcTag="<IMPORTE|N|12726.15/>
		*	obj=GetValTAg(LcTag,.t.)
		*	if !isnull(obj)
		*		? obj.value	&& devuelve 12726.15
		*		? obj.Tag	&& devuelve "IMPORTE"
		*		? Obj.type	&& devuelve "N"
		*		obj=null
		*	ENDIF
		*-----------------------------------------------------
		* Etiquetas cerradas simples
		*-----------------------------------------------------
		* lcTag="<ANIMAL=PERRO/>
		* ? GetvalTAg(lcTag)	&& muestra "PERRO"
		*
		* 	obj=GetValTag(lcTag,.t.)
		*	IF !isnull(obj)
		*		? Obj.TAg	&& muestra "ANIMAL"
		*		? obj.Value	&& muestra "PERRO"
		*		? obj.type	&& siempre muestra "C"
		*	ENDIF
		*-------------------------------------------------------
		* Rutina de exploración:
		*	LOCAL obj,fcr,nHand,lnResp
		*	FCR=ADDBS(FullPath(""))+"formula.txt"
		*	nhand=-1
		*	IF !This.GetFopen(fcr,@nhand,.f.,12)
		*		RETURN
		*	ENDIF
		*	DO WHILE !FEOF(nhand)
		*		lcTag=FGETS(nhand,2048)
		*		DO case
		*			CASE AT("|S|=",UPPER(lcTag))#0	&& ExecScrip()
		*				=GetValTAg(lcTag)
		
		*			CASE AT("#|=",lcTAg)#0			&& Define la tag como variable de paso y le asigna el valor
		*				obj=GetValTAg(lcTAg,.t.)
		*				IF !ISNULL(obj)
		*					lcEtiq=obj.Tag
		*					&lcEtiq=obj.Value
		*					obj=null
		*				ENDIF
		*
		*			OTHERWISE
		*		
		*				lnResp=GetValtag(lcTag)		&& Asigna a lnResp el valor contenido de la tag (puede ser |E|)
		*				
		*		ENDCASE
		*	
		*	ENDDO
		*	=FCLOSE(nhand)
		*	
		******************************************************
		
		LOCAL lcLast,lcREs,lnLines,nPart,lcVari,lctype,;
			lxReturn,objReturn,lcTryValor
		
		IF VARTYPE(xctag)#"C" OR EMPTY(xcTag)
			RETURN IIF(xlREturnObj,null,"")
		ENDIF
		LOCAL ARRAY gaTags(1),gaTypes(1)
		xcTAg=ALLTRIM(xcTag)
		xcTAg=ALLTRIM(xctag)
		* Tag inválida
		IF LEFT(xcTag,1)#"<" OR ;
				AT("=",xcTAg)=0 OR ;
				RIGHT(xcTag,1)#">"
			RETURN IIF(xlREturnObj,null,"")
		ENDIF
		lxREturn=""
		lcType="C"
		
		xcTag=ALLTRIM(xcTag)
		lcLast=IIF(RIGHT(xcTag,2)=="/>","/>",RIGHT(xcTag,1))
		lcRes=STREXTRACT(xcTag,"<",lcLast)
		
		IF AT("|=",lcRes)#0
			lnlines=ALINES(gaTags,lcRes,1+2,"|=")
			IF lnLines>0
				gaTAgs[1]=gaTags[1]+"|"
			ENDIF
		ELSE
			lnLines=ALINES(gatags,lcRes,1+2,"=")
		ENDIF
		*lcVari=gatags[1]
		IF lnLines>1
			lcTryValor=""
			FOR i=2 TO lnLines
				lcTryValor=lcTryValor+gaTags[i]
			NEXT
			IF AT("#|",gatags[1])#0
				xlREturnObj=.t.
				gaTAgs[1]=STRTRAN(gaTAgs[1],"#|","|")
			ENDIF
			lcVari=gatags[1]
			lcTryValor=gatags[2]
			nat=AT("|",gatags[1])
			IF nAt=LEN(gatags[1])-IIF(RIGHT(gatags[1],1)="|",2,1)
				nPart=ALINES(gatypes,gatags[1],5,"|")
				lcVari=gatypes[1]
				lcType=UPPER(gatypes[2])
				DO case
					CASE lcType$"NI"
						lxReturn=VAL(lcTryValor)
					CASE lcType="L"
						lxReturn=IIF(AT("T",lcTryValor)#0,.t.,.f.)
					
					CASE LCTYPE="D"
						lxReturn=CTOD(lcTryValor)
					
					CASE LCTYPE="T"
						lxReturn=CTOT(lcTryValor)
					CASE lctype="E"
						lxReturn=EVALUATE(lcTRyValor)
					CASE lcType="S"
						lcTryValor=CHRTRAN(lcTryValor,CHR(10),"")
						lcTryValor=CHRTRAN(lcTRyValor,CHR(28),CHR(13))
						lxReturn = EXECSCRIPT(lcTryValor)
					CASE lctype="X"
						lxREturn=null
					CASE lcType="O"
						lxReturn=null
					OTHERWISE
						lxReturn=lcTRyValor
				ENDCASE
			ELSE
				lxReturn = lcTryValor		
			ENDIF
		ENDIF
		IF xlREturnObj
			objReturn=CREATEOBJECT("empty")
			ADDPROPERTY(objReturn,"Tag",lcVari)
			ADDPROPERTY(objReturn,"Value",lxREturn)
			ADDPROPERTY(objReturn,"Type",lctype)
		ENDIF
		RETURN IIF(xlReturnObj,ObjReturn,lxREturn)
		
	ENDPROC

	PROCEDURE greenlines
		LPARAMETERS xoGrid,xnColor,xcLines
		LOCAL i,nLines,radColor,lcCompare,nAddhei,nAddtop
		*--------------------------------------------------
		* xoGrid: Refrencia al objeto Grid
		* xclines="LRTB" Left,Right,Top,Botton, "LRBT"=Default
		*          Pueden estar en cualquier orden
		* xnColor= Número de Color ó Cadena: "114,108,213" | ",255," | "128"
		*          Default=RGB(114,136,141)
		*********************************************************************
		STORE 0 TO nAddHei,nAddTop
		
		IF VARTYPE(xcLines)#"C"
			xcLines="LRTB"
		ENDIF
		xcLines=UPPER(ALLTRIM(xcLines))
		
		IF EMPTY(xnColor)
			xnColor=RGB(114,136,141)
		ENDIF
		IF VARTYPE(xnColor)="C"
			lcCompare="1234567890,"
			xnColor=UPPER(ALLTRIM(xnColor))
			radColor=CHRTRAN(xnColor,CHRTRAN(xnColor,lcCompare,""),"")
			nlines=ALINES(gaVal,radColor,1,",")
			IF nLInes<3
				DIMENSION gaVal(3)
			ENDIF
			FOR i=1 TO 3
				gaVal[i]=IIF(EMPTY(gaval[i]),0,MIN(VAL(gaval[i]),255))
			NEXT
			xnColor=RGB(gaval[1],gaval[2],gaval[3])
			
		ENDIF
		
		&& Para el color negro, no incorpora las líneas
		IF xnColor=0
			RETURN
		ENDIF
		xoForm=xoGrid.parent
		IF AT("L",xclines)#0
			IF !PEMSTATUS(xoForm,"LineVLeft",5)
				xoForm.NewObject("LineVLeft","Line")
			ENDIF
			WITH xoForm.LineVLeft
				.BorderColor=xnColor
				.width=0
				.Height=xoGrid.Height+nAddHei
				.Top=xoGrid.Top+nAddtop
				.Left=xoGrid.left
				.Visible=.t.
			ENDWITH	
		ENDIF
		IF AT("R",xcLines)#0
			IF !PEMSTATUS(xoForm,"LineVRight",5)
				xoForm.NewObject("LineVRight","Line")
			ENDIF	
			WITH xoForm.LineVRight
				.BorderColor=xncolor
				.width=0
				.Height=xoGrid.Height+nAddHei
				.Top=xoGrid.Top+nAddTop
				.Left=xoGrid.left+xoGrid.Width-1
				.Visible=.t.
			ENDWITH	
		ENDIF
		IF AT("T",XCLINES)#0
			IF !PEMSTATUS(xoForm,"LineHTop",5)
				xoForm.NewObject("LineHTop","Line")
			ENDIF
			
			WITH xoForm.LineHTop
				.BorderColor=xncolor
				.width=xoGrid.Width
				.Height=0
				.Top=xoGrid.Top+nAddtop
				.Left=xoGrid.left
				.Visible=.t.
			ENDWITH	
		ENDIF
		
		IF AT("B",xcLines)#0	
			IF !PEMSTATUS(xoForm,"LineHBott",5)
				xoForm.NewObject("LineHBott","Line")
			ENDIF
		
			WITH xoForm.LineHBott
				.BorderColor=xnColor
				.width=xoGrid.Width
				.Height=0
				.Top=xoGrid.Top+xoGrid.Height-1
				.Left=xoGrid.left
				.Visible=.t.
			ENDWITH
		ENDIF
		
		
		
		
		
			
	ENDPROC

	PROCEDURE grgotfocus
		nEvents=AEVENTS(gaEvent,0)
		IF nEvents=0	
			RETURN
		ENDIF
		loSuc=gaEvent[1]
		*oParent=loSuc.Parent.parent
		loSuc.parent.parent.HighlightBackColor=rgb(0,0,128)
		
	ENDPROC

	PROCEDURE grlostfocus
		nEvents=AEVENTS(gaEvent,0)
		IF nEvents=0	
			RETURN
		ENDIF
		loSuc=gaEvent[1]
		loSuc.parent.parent.HighlightBackColor=rgb(153,171,174)
	ENDPROC

	PROCEDURE gstandar
		lparameters cObjWid,cObjHei,xlCmg1,lAyuda,xgnAddHei,xgnDespla
		*Thisform.FunRaya1.gStandar("ShapeWidth","ShapeHeight,lCmg1[cObjeto],LAyuda)
		local gnAdd
		if Vartype(cObjHei)#"C".or.empty(cObjHei)
			cObjHei=cObjWid
		endif
		
		cobCmg="Cmg1"
		kevar=Vartype(xlCmg1)
		if kevar="C"
			cObCmg=xlCmg1
			lCmg1=!empty(cObCmg)
		else
			lCmg1=xlCmg1
		endif
		if vartype(xgnAddHei)#"N"
			xgnAddHei=0
		endif
		if vartype(xgnDespla)#"N"
			xgnDespla=0
		endif
		gnAdd=iif(lcmg1,42,32)+xgnAddHei
		this.formublok(.f.)
		with thisform
			.Width=.&cObjWid..left*2+.&cObjWid..width
			.Height=.&cObjHei..top+.&cObjHei..Height+gnAdd
			if lCmg1
				.&cObCmg..Top=.Height-.&cObCmg..Height-6
				.&cObCmg..Left=This.ThCentrar(.Width,.&cObCmg..Width)+xgnDespla
			endif
			if lAyuda
				.CmAyuda1.top=.Height-24
				.CmAyuda1.Left=3
			endif
			.cmdClose1.top=.Height-28
			.cmdClose1.Left=.Width-28
		endwith
		This.FormuBlok(.t.)
	ENDPROC

	PROCEDURE limpiar
		lGrilla=PEMSTATUS(thisform,"GRILLA",5)
		IF lGrilla
			SELECT ZCALCUR
			ZAP
			THISFORM.GRILLA.REFRESH
		ELSE
			WITH thisform.List1
				.clear
				.Selecteditembackcolor=rgb(153,171,174)
				.refresh	
			endwith
		ENDIF
		
		With thisform
			store 0 to .psolve1,.psolve2,.psolve3,.nparen,;
				.nitem,.numero,.acum
			store "" to .stParen,.Cadena,.plista
			.CmBorrope.visible=.f.
			.Signo="+"	
			.dezimac=.f.	
			.rcparen=.f.
			.text6.value=.stParen
			.cmDelParen.visible=.f.
			.CmAbre.Visible=.t.
			.CmCierra.Visible=.f.
			.CmClip.Visible=.f.
			.Text1.Value=.numero	
			.text2.value=.Acum
			.text3.refresh
			.text7.refresh
			.text8.value=0
			.text9.value=len(.cadena)
		*	.text11.refresh
			.txdezim.refresh
			.TxMem.Value=.Memoria1
		
			.check1.refresh
			.Check2.refresh
		*	.Check3.refresh
		endwith
		
	ENDPROC

	PROCEDURE micurdir
		LOCAL cdir,objShell,cDir
		objShell=CreateObject("Wscript.Shell")
		cDir=objShell.CurrentDirectory
		objShell=null
		IF RIGHT(cdir,1)="\"
			cDir=LEFT(cDir,LEN(cdir)-1)
		endif
		return cDir
		
	ENDPROC

	PROCEDURE opermat
		LPARAMETERS cSigno,nAcumulador,nNumero,nDecimals
		******************************************************
			*This.Opermat(cSignoper,nAcumulador,nNumero,nDecimals)
		do case
			case csigno="+"
				nAcumulador=nAcumulador+nNumero
			case csigno="-"
				nAcumulador=nAcumulador-nNumero
			case csigno="/"
				nAcumulador=Round(nAcumulador/nNumero,ndecimals)
			case csigno="*"
				nAcumulador=nAcumulador*nNumero	
		endcase
		return nAcumulador
	ENDPROC

	PROCEDURE putdecimal
		LOCAL nSpa,nDezim,lcMask
		nSpa=this.numspa
		nDezim=thisform.ndezim
		nRepe=nSpa+IIF(EMPTY(nDezim),0,nDezim+1)
		nComas=INT(nSpa/3)
		cForma=repli("9",nRepe)+REPLICATE(",",nComas)+IIF(EMPTY(nDezim),"",".")
		lcMask=This.Detmask(nspa,ndezim)
		lnWid=This.Wokupas(lcMask)
		WITH thisform
			.Text1.InputMask=lcMask
			.Text2.InputMask=lcMask
			.TxMem.INputMask=lcMask
			.TxMem.Width=lnWid
			.TxDezim.value=.ndezim
			.TxMem.left=.Shape7.left+.Shape7.Width-lnWid-4
			.Label2.left=.TxMem.left-.Label2.Width-1
		ENDWITH
		WITH thisform.grilla
			.Columns[3].InputMask=lcMask
			.Columns[3].Width=lnWid
		ENDWITH
		this.Numforma=lcMask
		
		
	ENDPROC

	PROCEDURE putparen
		with thisform
			.cMrAIZ.Visible=.f.
			.nparen=.nparen+1
			.stparen=.stparen+.signo+"("
			.Cmbas.Setall("Enabled",.f.)
			.text6.Value=.StParen
			.CmDelParen.Visible=.t.
			if .nParen>2
				.CmAbre.Visible=.f.
			endif
			
		endwith	
	ENDPROC

	PROCEDURE putraya
		LPARAMETERS xObjeto
		LOCAL lntop,lnLeft,lnWid,lnHei,lcRoot
		lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
		IF PCOUNT()=0
			Thisform.imr2.visible=.f.
		   RETURN 
		ENDIF
		lnTop=OBJTOCLIENT(xObjeto,1)
		lnLeft=OBJTOCLIENT(xObjeto,2)
		lnWid=OBJTOCLIENT(xObjeto,3)
		lnHei=OBJTOCLIENT(xObjeto,4)
		IF !PEMSTATUS(thisform,"imr2",5)
			thisform.NewObject("IMR2","Imaraya",lcRoot)
		ENDIF
		
		With thisform.imr2
			.visible=.t.
			.left=lnLeft+This.ThCentrar(lnwid,.width)
			.top=lnTop+lnHei
		ENDWITH
		
	ENDPROC

	PROCEDURE puttag
		LPARAMETERS xcClave,xcValor,xnLevel,xcForceType,xlNotype,xcSep1,xcSep2
		****************************************************************************
		* PROCEDURE This.This.PutTag(xcClave,xcValor,xnLevel,xcForceType,xlNotype,xcSep1,xcSep2)
		****************************************************************************
		* Genera una Tag Cerrada
		*!*		xcClave:		Clave de etiqueta
		*!*		xcValor:		Valor de la etiqueta
		*!*		xnLevel:		Desplazamiento de escritura (REPLICATE(CHR(9),xnLevel)
		*!*		xcForceType:	Tipo Forzado (I,E,S) cuando se necesita un comportamiento especial
		*!*		xlNoType:		Etiqueta no calificada (cerrada normal)
		*!*		xcSep1:			Separador de apertura	("<" default)
		*!*		xcSep2:			Separador de cierre		("/>" default)
		*-----------------------------------------------------------------------------------------
		* xlNotype=.F. (Default)
		* <NOMBRE|N|1250.12/> (tipo numérico)
		* <DIA|D|25/12/2013/> (Tipo date)
		* <RESOLVE|E|SQRT( lnCateto1**2 + lnCateto2**2 )/>
		* <PROCEDE|S|MESSAGEBOX("Resultado="+LTRIM(STR(lnResp,14,4)))/>
		*---------------------------------------------------------------
		* Los tipos "CNLDT" se autocalifican
		* This.This.PutTag("VALOR",2012) genera: "<VALOR|N|=2012/>"
		* This.This.PutTag("ESTADO",.T.) genera: "<ESTADO|L|.T./>"
		* This.This.PutTag("CUIT","20120482980") genera "<CUIT|C|=2012048298/>"
		* This.This.PutTag("FECHA",17/12/2013")  genera "FECHA|D|=17/12/2013/>"
		*
		*-------------------------------------------------------------------------
		* Definición forzada
		*
		*	Escritura
		*	LOCAL lcform,lcPut
		*	LCFORM=""
		*	TEXT TO LCFORM TEXTMERGE NOSHOW PRETEXT 7
		*	<<This.This.PutTag("LNRESP",0,0,"*N")>>
		*	<<This.This.PutTag("LNCATETO1",12,0,"*N")>>
		*	<<This.This.PutTag("LNCATETO2",20,0,"*N")>>
		*	<<This.This.PutTag("LNRESP","SQRT( lnCateto1**2 + lnCateto2**2 )",0,"*E")>>
		*	<<This.This.PutTag("LNRESP","(lnResp+LnResp**2)/2",0,"*E")>>
		*	<<This.This.PutTag("MESSAGE",[MESSAGEBOX("Resultado="+LTRIM(STR(lnResp,14,4)))],0,"S")>>
		*	ENDTEXT
		*
		*	LcFile=ADDBS(fULLPATH(""))+"Formula.txt"
		*	STRTOFILE(lcForm,lcFile)
		*
		*	Nota: En xcForceType se utiliza "*", pero también se puede utilizar
		*	      cualiquier otro símbolo que no sea una letra
		*	      También se podría escribir a la inversa, "E*" en lugar de "*E"   	
		*
		*-------------------------------------------------------------------------------------
		*	REsultado (Archvivo Formula.txt)
		*	<LNRESP|N#|=0/>						&& define lnREsp=0
		*	<LNCATETO1|N#|=12/>					&& define LnCateto1=12
		*	<LNCATETO2|N#|=20/>					&& define LnCateto2=20
		*	<LNRESP|E#|=SQRT( lnCateto1**2 + lnCateto2**2 )/> 	&& lnResp=Sqrt(ln..."
		*	<LNRESP|E#|=(lnResp+LnResp**2)/2/>			&& lnResp=(lnResp+lnResp**2)/2
		*	<MESSAGE|S|=MESSAGEBOX("Resultado="+LTRIM(STR(lnResp,14,4)))/>
		*
		*	Nota: Al ejecutar, el Messagebox mostrará "Resultado=283.6619"
		*
		*---------------------------------------------------------------
		* Ejemplo para type "S" [ ExecScript() ]
		*	*Generación de la etiquta
		*
		*	LOCAL lcform,lcPut
		*	LCFORM=""
		*	TEXT TO LCFORM NOSHOW PRETEXT 7
		*	USE C:\THEODORE\ALOJA IN 0 EXCLUSIVE
		*	SELECT ALOJA
		*	IF RECCOUNT()>10
		*		GO 10
		*		replace valchar WITH "RGB() FUNCTION"
		*	ENDIF
		*	BROWSE
		*	USE
		*	ENDTEXT
		*
		*	LCPUT="SCRIPT"
		*	LcFile=ADDBS(Fullpath(""))+"ScripTag.txt"
		*	STRTOFILE(This.This.PutTag(lcPut,lcForm,,"S"),lcFile)
		*
		*	*Ejecuta procedimiento
		*	LcFile=ADDBS(FullPath(""))+"ScripTag.txt"
		*	=This.GetValTag(FILETOSTR(lcFile))
		*-----------------------------------------------------
		
		LOCAL lcType,lcPutVal,lcAddComm
		STORE "" TO lcAddComm
		lcType=VARTYPE(xcValor)
		IF VARTYPE(xcForceType)="C" AND !EMPTY(xcForceType) 
			xcForceType=UPPER(ALLTRIM(xcForceType))
			IF LEN(xcForceType)>1
				xcForceType=This.ValidTExt(xcForceType,2)
				lcAddComm="#"
			ENDIF
			IF xcForceType$'CNDTLES'
				lcType=xcForceType
				xlNotype=.F.
				IF lcType="S"
					xcValor=CHRTRAN(xcValor,CHR(10),"")
					xcValor=CHRTRAN(xcValor,CHR(13),CHR(28))
				ENDIF
				
			ENDIF
		ENDIF
		
		
		DO case
			CASE lcType="N"
		
				LcPutVal=ltrim(str(xcValor,20,this.TelDecim(xcValor)))
			CASE LCTYPE="L"
				lcPutVal=IIF(xcValor,".T.",".F.")
			CASE lcType="D"
				lcPutVal=DTOC(xcValor)	
			CASE lcType="T"
				lcPutVal=TTOC(xcValor)
			CASE lcType="X"
				LcPutVal=".null."
			CASE lcType="O"
				lcPutVal="Object Reference"
			OTHERWISE
				LcPutVal=xcValor
		ENDCASE
		
		IF VARTYPE(xcSep1)#"C" OR EMPTY(xcSep1)
			xcSep1="<"
		ENDIF
		IF VARTYPE(xcSep2)#"C" OR EMPTY(xcSep2)
			xcSep2="/>"
		ENDIF
		IF VARTYPE(xnLevel)#"N"
			xnLevel=0
		ENDIF
		lcType=lcType+lcAddComm
		RETURN REPLICATE(CHR(9),xnLevel);
			+xcSep1;
			+ALLTRIM(xcClave);
			+IIF(xlNoType,"","|"+lcType+"|");
			+"=";
			+ALLTRIM(lcPutVal);
			+xcSep2
		
	ENDPROC

	PROCEDURE qitparen
		with thisform
			.npacie=.npacie+1
			if !empty(.cadena)
				.stparen=.stparen+.signo+.cadena
				.cadena=""
				.text7.refresh
			endif
		*	csp="stparen"+ltrim(str(.nparen))
		*	cpsol="psolve"+ltrim(str(.nparen))
			cpsol="psolve1"
			.stparen=.stparen+")"
			nocabre=Occurs("(",.stparen)
			nocshat=Occurs(")",.stparen)
			if At("(*",.stparen)>0
				.stparen=StrTran(.stparen,"(*","(")
			endif
			if At("(/",.stparen)>0
				.stparen=StrTran(.stparen,"(/","(")
			endif		
					
			if At("(+",.stparen)>0
				.stparen=StrTran(.stparen, "(+" , "(" )
			endif
		
			if nocabre#nocshat
			*	Messagebox("Abiertos: "+ltrim(str(nocabre));
			*		+"Cerrados: "+ltrim(str(nocshat));
			*		+"Faltan paréntesis.",0,"Paréntesis")
				return 
			endif			
			cCalcula=alltrim(substr(.stparen,2))
			if cCalcula="()" .or. cCalcula="(())"
				.CmDelParen.Click
		
				return
			endif	
			.Psolve1= Evaluate(cCalcula)
			.TExt6.Value=.Stparen
			this.Opera()
		*	.nparen=.nparen-1
		*	if nocabre=nocshat
		*		.nparen=0
		*	endif
			.CmAbre.Visible=.t.
			if .nparen=0
				.CmCierra.Visible=.F.
				.TEXT6.value=.stparen
				.CmDelParen.Visible=.f.
			*	.CmRaiz.Visible=!EMPTY(.Acum)
			ENDIF
		endwith
	ENDPROC

	PROCEDURE quitacar
		with thisform
			lDezimal=.Dezimac
			if .numero#0
				nlc=Len(.cadena)
				if nlc=1
					.Cadena=""
					lDezimal=.f.
				else
					.CAdena=Substr(.CAdena,1,nlc-1)
					IF RIGHT(.CADENA,1)="."
						.Cadena=Substr(.Cadena,1,At(".",.cadena)-1)
						lDezimal=.f.
					endif
				endif
				.Numero=iif(.Dezimac,Val(.Cadena),Int(.numero/10))
				.Dezimac=lDezimal
				.Text1.Value=.numero
				.text7.refresh
			endif
			.text9.value=len(.cadena)	
			
		ENDWITH
		
		
	ENDPROC

	PROCEDURE quitentra
		With thisform
			.Numero=0
			.dezimac=.f.
			.signo="+"
			.Cadena=""
			.Text1.Value=.numero
			.text3.refresh
			.text7.refresh
			.Text9.value=len(.cadena)
		Endwith
		
	ENDPROC

	PROCEDURE reopera
		LPARAMETERS xlRestable
		LOCAL nCount
		nCount=0
		thisform.acum=0
		thisform.nitem=0
		nAcum=0
		nDezim=thisform.ndezim
		
		SELECT zcalcur
		IF xlRestable
			ngReg=RECNO()
		ENDIF
		
		SCAN
			IF !EMPTY(parentes)
				replace Importe WITH EVALUATE(ALLTRIM(parentes))
			ENDIF
			nAcum=This.Opermat(signoper,nAcum,importe,ndezim)
			nCount=nCount+1
		ENDSCAN
		IF xlRestable.and.!EMPTY(ngREg)
			GO ngReg
		ENDIF
		WITH thisform
			.nItem=nCount
			.Text8.Value=nCount
			.Acum=nAcum
			.text2.value=nAcum
		ENDWITH
		
		
	ENDPROC

	PROCEDURE separtext
		LPARAMETERS cFrase,nAncho,xaMatriz,xnMinDef
		
		*PROCEDURE SEPARTEXT()
		*****************************************************
		local fi,qi,nit,lenfra,apunto,di,gaparte,ngap,xi,nis,nspacios,nSaltos,sbFrase,xi_
		* xnMinDef se utiliza cuando se necesita un minimo de items en
		* la matriz pasada por referencia. Completa con " "
		if Vartype(xnMindef)#"N"
			xnMindef=0
		endif
		if vartype(nAncho)#"N"
			nAncho=70
		endif
		cFrase=alltrim(cFrase)
		sbFrase=cFrase
		* Si la frase es Vacio, vuelve de inmediato
		if empty(cfrase)
			if xnMindef=0
				Dimension xaMatriz(1)
			else
				Dimension xaMatriz(xnMindef)
			endif
			Store "" to xaMatriz
			return
		else
			*Revisar los puntos
			npuntos=Occurs(".",cFrase)
			if npuntos#0
				oFrase=""
				nlen=len(cFrase)
				dimension gapuntos(1)
				gpase=0
				ni=0
				do while .t.
					ni=ni+1
					if ni=nlen
						exit
					endif			
					if Substr(cFrase,ni,1)="."
						cExa=Substr(cFrase,ni+1,1)
						if !INlist(cExa,Chr(32),".")
							cFrase=Substr(cFrase,1,ni)+" "+Substr(cFrase,ni+1)
							nlen=nlen+1
						endif
					endif
		
				enddo
		
		
			endif
		endif
		
		* Calcula cantidad de saltos y divide en gaParte
		nspacios=Occurs(Chr(32),cFrase)
		ntrece=Occurs(chr(13),cfrase)
		nsaltos=Occurs(chr(10),cFrase)
		ngap=iif(nSaltos<2,1,nSaltos)
		
		
		* Antes decia ngap=iif(nsaltos<2,1,nTrece)
		nis=0
		Dimension gaParte(ngap)
		if nGap=1
			gaparte[1]=cfrase
		else
			xcFrase=cFrase
			do while .t.
				xngap=At(Chr(10),xcFrase)
				if xnGap=0
					exit
				endif
				nis=nis+1
				dimension gaParte(nis)
				gaParte[nis]=Left(xcFrase,xnGap-1)
				xcFrase=Substr(xcFrase,xnGap+1)
			
			enddo
			if !empty(xcFrase)
				nis=nis+1
				dimension gaparte(nis)
				gaParte[nis]=alltrim(xcFrase)
			endif
		endif
		
		for xi_=1 to alen(gaParte)
			gaparte[xi_]=CHRTRAN(gaParte[xi_],CHR(13)+CHR(19),"")
		*	if At(chr(13),gaParte[xi_])>0
		*		gaParte[xi_]=strtran(gaParte[xi_],chr(13),"")
		*	endif
		*	if At(chr(19),gaparte[xi_])>0
		*		gaparte[xi_]=Strtran(gaparte[xi_],chr(19))
		*	endif
		next
		nSumPerdi=0
		Dimension xaMatriz(1)
		nit=0
		for xi=1 to alen(gaParte)
			sbFrase=alltrim(gaparte[xi])
			nspacios=Occurs(Chr(32),sbFrase)
			Lenfra=Len(sbFrase)
		
			IF LENFRA<=nAncho
				nit=nit+1
				dimension xaMatriz(nit)
				xaMatriz[nit]=sbFrase
			else
				if nSpacios>0
				*aPunto[] recoge las posiciones de aparición de Chr(32)
					Dimension aPunto(1)
					di=0
					for qi=1 to len(sbFrase)
						npun=At(Chr(32),sbFrase,qi)
						if npun=0
							exit
						endif
						di=di+1
						Dimension aPunto(di)
						aPunto[di]=npun
					next
					nLast=1
					cRest=sbFrase
					nSumlen=0
					nParte=nAncho
				
					For di=1 to alen(aPunto)
						keBodrio=""
						nRemp=aPunto[di]
						if aPunto[di]>=nParte
						
							cProye=Alltrim(Substr(sbFrase,nLast,aPunto[di]-nLast+1))
							nLastResta=0
							do while len(cProye)>nAncho
								nLastResta=nLastResta+1
								cProye=Alltrim(Substr(sbFrase,nLast,aPunto[di-nLastREsta]-nLast+1))
							enddo
							nit=nit+1
							Dimension xaMatriz(nit)
							xaMatriz[Nit]=cProye
		*					Alltrim(Substr(sbFrase,nLast,aPunto[di]-nLast+1))
		
							nSumLen=nSumLen+Len(xaMatriz[nit])
							nPerdido=nAncho-len(xaMatriz[nit])
							nSumPerdi=nSumperdi+nPerdido
							nLast=aPunto[di-nLastResta]+1
							nParte=nSumLen+nAncho+nSumPerdi
						endif
						* Ultima parte
						if di=alen(apunto)
							nit=nit+1
							Dimension xaMatriz(nit)
							xaMatriz[Nit]=Alltrim(Substr(sbFrase,nLast,lenfra-nLast+1))
						endif
		
					next
				else
					nSta=int(len(sbfrase)/nAncho)
					if Mod(Len(sbfrase),nAncho)#0
						nSta=nsta+1
					endif
					xSta=1
					zbFrase=sbfrase
					for fi=1 to nSta
						nit=nit+1
						dimension xaMatriz(nit)
						zbFrase=Substr(zbFrase,xSta)
						xaMatriz[nit]=Left(zbfrase,nAncho)
						xSta=xSta+nAncho
					next
				endif
			endif
		next	
		if xnMindef>nit
			Dimension xaMatriz(xnMindef)
			for jo=Nit+1 to xnMindef
				xaMatriz[jo]=" "
			next
		endif
		
	ENDPROC

	PROCEDURE showerror
		LPARAMETERS objExcep
		LOCAL lcMens
		lcMens="Fecha "+TRANSFORM(DATETIME());
			+CHR(13)+"Mensaje: "+objExcep.message;
			+CHR(13)+"ErrorNo: "+TRANSFORM(objExcep.Errorno);
			+CHR(13)+"Llamada: "+objExcep.Uservalue 
		IF VERSION(2)#0
			lcMens=lcMens+CHR(13)+"Línea: "+TRANSFORM(objExcep.lineNo)
		ENDIF
		
		STRTOFILE(lcMens+CHR(13),"ThError.log",1)
		lcMens="Se ha producido un error:"+chr(13)+lcMens
		MESSAGEBOX(lcMens,0,tH_MENSAJE)
	ENDPROC

	PROCEDURE teldecim
		LPARAMETERS xcnNUmero,xnPrecision
		*****************************************
		* Determina la cantidad de decimales de un número.
		* xnPrecision podría ser Entre 10 y 16
		* 16 daría una precisión mayor pero válida para
		* números con alta cantidad de decimales.
		*********************************************
		local i_,LnNumero,lnpNum,cRest,;
			nDecimales,lcTipVar
		if vartype(xnprecision)#"N"
			xnPrecision=10
		endif
		lcTipVar=Vartype(xcnNumero)
		do case
			case lcTipVar="C"
				LnNumero=val(xcnNumero)
			case lcTipVar$'NI'
				LnNumero=xcnNumero
			other
				return 0
		endcase
		if LnNumero=0
			return 0
		endif
		nDecimales=16
		for i_=0 to 16
			lnpNum=Round(LnNumero*10**i_,xnPrecision)
			cRest=lnpNum-Int(lnpNum)
			nDecimales=i_
			if Round(cRest,xnPrecision)=0
				exit
			endif
		next
		return nDecimales
		
	ENDPROC

	PROCEDURE thcentrar
		LPARAMETERS wCont , wObje ,xnLeft,xnRight 
		*function thcentrar(wCont , wObje ,xnLeft,xnRight )
		**********************************
		* Permite centrar horizontalmente un objeto en un contenedor
		* wCont = ancho del contenedor (o espacio disponible)
		* wObje = ancho del objeto (o texto) a centrar en el contenedor
		* Devuelve la posicion Left del objeto o texto.
		* xnLeft= Desplazamiento de centrado (a la derecha)
		* xnRight= Desplazamiento de centrado (a la izquierda).
		
		if Vartype(xnLeft)#"N"
			xnleft=0
		endif
		if Vartype(xnright)#"N"
			xnright=0
		endif
		wCont=wCont - (xnLeft+xnRight)
		return xnLeft+ ( Round(wCont/2,0) - Round(wObje/2,0) )
	ENDPROC

	PROCEDURE widgrid
		LPARAMETERS xoGrid
		*******************
		IF VARTYPE(xoGrid)#"O"
			RETURN
		ENDIF
		LOCAL nRecMark,nBars,nAddWid,lRecordMark,nBars,lBars,i,;
			_rmt,_rmf,_bart,_barf,_adgr
			
		WITH xoGRid
			lRecordmark=.recordMark
			lBars=IIF(.ScrollBars>1,.t.,.f.)
			nCantCol=.Columncount
			nSumWidCol=0
			FOR i=1 TO nCantCol
				nSumwidcol=nSumWidCol + .Columns[i].Width
			NEXT
		ENDWITH
		
		
		_rmt=IIF(PEMSTATUS(_screen,"Th_rmt",5),_screen.th_rmt,10)
		_rmf=IIF(PEMSTATUS(_screen,"Th_rmf",5),_screen.th_rmf,1)
		_bart=IIF(PEMSTATUS(_screen,"Th_bart",5),_screen.th_bart,20)
		_barf=IIF(PEMSTATUS(_screen,"Th_barf",5),_screen.th_barf,4)
		_adgr=IIF(PEMSTATUS(_screen,"Th_adgr",5),_screen.th_adgr,1)
		
		nRekMark=iif(lRecordMark,_rmt,_rmf)
		nBars=iif(lbars,_bart,_barf)
		
		xoGrid.width=nSumWidCol+nCantCol-1 + nRekMark + nBars + _adgr
		
		
	ENDPROC

	PROCEDURE wokupas
		lparameters xcTexto,xcFuente,xnTam,xcEstilo,xnAdd
		
		if Vartype(xcFuente)#"C"
			xcFuente="Arial"
		endif
		if Vartype(xnTam)#"N"
			xnTam=8
		endif
		if Vartype(xcEstilo)#"C"
			if Vartype(xcEstilo)="L"
				xcEstilo=iif(xcEStilo,"B","N")
			else
				xcEstilo="N"
			endif
		endif
		if Vartype(xnAdd)#"N"
			xnAdd=0
		endif
		nProm=FontMetric(6,xcFuente,xnTam,xcEstilo)
		nvtex=TxtWidth(xcTExto,xcFuente,xnTam,xcEstilo)*nProm
		if xnAdd=0
			xnAdd=Int(nvTex/20)
		endif
		Return xnAdd+nvTex
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gcnt AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />

	BackColor = 255,247,230
	BorderColor = 255,150,45
	Height = 21
	Name = "gcnt"
	Visible = .F.
	Width = 54

	ADD OBJECT 'Image1' AS image WITH ;
		BackStyle = 0, ;
		Height = 17, ;
		Left = 28, ;
		Name = "Image1", ;
		Picture = ..\graphics\zcalcu_mini.bmp, ;
		Top = 2, ;
		Width = 22
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "[+] = ", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 4, ;
		Name = "Label1", ;
		Top = 3, ;
		Width = 26
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 21, ;
		Left = 0, ;
		Name = "Shape1", ;
		ToolTipText = "[Shift]»[+] = Acumula el valor del cuadro", ;
		Top = 0, ;
		Width = 54
		*< END OBJECT: BaseClass="shape" />

ENDDEFINE

DEFINE CLASS imaraya AS image 
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	Height = 10
	Name = "imaraya"
	Picture = ..\graphics\raya.bmp
	Visible = .F.
	Width = 22

ENDDEFINE

DEFINE CLASS semaf100 AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="iverde" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="irojo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="iamarillo" UniqueID="" Timestamp="" />

	BackStyle = 0
	BorderWidth = 0
	Height = 19
	Name = "semaf100"
	Width = 21

	ADD OBJECT 'iamarillo' AS image WITH ;
		BorderColor = 114,136,141, ;
		BorderStyle = 1, ;
		Height = 18, ;
		Left = 1, ;
		Name = "iamarillo", ;
		Picture = ..\graphics\yellowball.bmp, ;
		Top = 1, ;
		Visible = .F., ;
		Width = 20
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'irojo' AS image WITH ;
		BorderColor = 114,136,141, ;
		BorderStyle = 1, ;
		Height = 18, ;
		Left = 1, ;
		Name = "irojo", ;
		Picture = ..\graphics\redbrball.bmp, ;
		Top = 1, ;
		Visible = .F., ;
		Width = 20
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'iverde' AS image WITH ;
		BorderColor = 114,136,141, ;
		BorderStyle = 1, ;
		Height = 18, ;
		Left = 1, ;
		Name = "iverde", ;
		Picture = ..\graphics\greenball.bmp, ;
		Top = 1, ;
		Visible = .F., ;
		Width = 20
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE Init
		WITH THIS
			.height=.iamarillo.Height+1
			.Width=.Iamarillo.Width+1
			.irojo.Visible=.t.
			.iverde.Visible=.f.
			.iamarillo.Visible=.f.
		ENDWITH
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS telchain AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmAcepta" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gmarco1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: vericuit
	*</DefinedPropArrayMethod>

	BackColor = 184,201,197
	Caption = "TelChain"
	Desktop = .T.
	DoCreate = .T.
	Height = 72
	Icon = ..\graphics\fibona5inv.ico
	Left = 0
	MaxButton = .F.
	MinButton = .F.
	Name = "telchain"
	ShowTips = .T.
	ShowWindow = 1
	Top = 0
	vericuit = .F.
	Width = 375
	WindowType = 1

	ADD OBJECT 'CmAcepta' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\flidere1n.bmp, ;
		Enabled = .T., ;
		Height = 24, ;
		Left = 161, ;
		Name = "CmAcepta", ;
		Picture = ..\graphics\flidere1.bmp, ;
		TabIndex = 2, ;
		ToolTipText = "Aceptar y Cerrar.", ;
		Top = 7, ;
		Width = 33
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'gmarco1' AS shape WITH ;
		BackColor = 231,237,234, ;
		BorderColor = 114,136,141, ;
		Height = 21, ;
		Left = 7, ;
		Name = "gmarco1", ;
		Top = 9, ;
		Width = 101
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 15, ;
		Name = "Label1", ;
		TabIndex = 4, ;
		Top = 12, ;
		Width = 34
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 221,226,222, ;
		Height = 33, ;
		Left = 3, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 3, ;
		Width = 229
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Text1' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 114,136,141, ;
		DisabledBackColor = 242,247,243, ;
		DisabledForeColor = 0,0,0, ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 69, ;
		Name = "Text1", ;
		SpecialEffect = 1, ;
		TabIndex = 1, ;
		Top = 9, ;
		Width = 90
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Init
		parameters xoForm,xcLista,xcAccion
		
		local lcRoot
		lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
		ADDPROPERTY(_Screen,"ThCadena","")
		thisform.NewObject("cmdClose1","cmdClose",lcRoot)
		thisform.NewObject("gCalcu1","gCalcu",lcRoot)
		with thisform
			
			.AddProperty("FormCall",xoForm)
			.AddProperty("Metodo",xcAccion)
			
		ENDWITH
		LOCAL lcFormat,lcInputMask,lcValor,;
			lnMaxlen,lnWid,;
			lcTexto,lcCaption,xlOcultar
			
		STORE "" TO lcFormat,lcInputMask,lcValor
		STORE 0 TO lnMaxLen,lnWid
		lcTexto="Texto"
		lcCaption="Ingrese ó Confirme el Texto"
		
		IF VARTYPE(xcLista)="C"
		
			
			nl=ALINES(gamove,LOWER(xcLista),16,">")
			IF nl#0
				FOR i=1 TO ALEN(gamove)
					lcGalin=STREXTRACT(GAMOVE[i],"<","/>",1)
					*lcGalin=CHRTRAN(lcGalin,CHR(32),"")
					lcGalin=ALLTRIM(lcGalin)
					nat=AT("=",lcGalin)
					IF nat#0
						lcVar=SUBSTR(lcGalin,1,nat-1)
						lcVal=SUBSTR(lcGalin,nat+1)
						DO case
							CASE lcVar="value"
								lcValor=ALLTRIM(lcVal)
							CASE lcVar="format"
								lcFormat=lcVal
							CASE lcVar="inputmask"
								lcInputMask=lcVal
							CASE lcVar="maxlen"
								lnMaxlen=VAL(lcVal)
							CASE lcVar="width"
								lnWid=VAL(lcVar)
							CASE lcVar="maxlenght"
								lnMaxLen=VAL(lcVar)
							CASE lcVar="caption"
								lcCaption=PROPER(ALLTRIM(lcVal))
							CASE lcVar="label"
								lcTexto=PROPER(ALLTRIM(lcVal))
						ENDCASE
							
					ENDIF
				NEXT
			ENDIF
		ENDIF
		
		
		ncw=FontMetric(6,'Arial',8)
		
		IF lnWid=0
			nTam=LnMaxLen
			if ntam=0
				ntam=40
			endif
			LnWid=tHISFORM.gCalcu1.wokupas(REPLICATE(IIF(nTam>40,"r","R") ,nTam),"Arial",8,"N",0)
		endif
		
		Thisform.Valoret=lcValor
		
		
		With thisform.Text1
			.format=lcFormat
			.InputMask=lcInputMaSK
			.Maxlength=lnMaxLen
			.Width=lnWid
		endwith
		lcTexto=StrTran(lcTexto,":")
		nWidLabel=Int(Len(lcTexto)*ncw*1.1)
		xntop=140
		xnleft=100
		
		with thisform
			.Caption=" "+Proper(lcCaption)
			.label1.Width=nWidLabel
			.Label1.Caption=Proper(lcTexto)+":"
			.Text1.ControlSource='Thisform.Valoret'
			if xlOcultar
				.text1.PasswordChar="*"
			endif
		endwith
			
		nLefLabel=Thisform.Label1.Left
		*nWidLabel=thisform.Label1.width
		nTopLabel=Thisform.Label1.Top
		With thisform.Text1
			.Top=ntopLabel-3
			.Left=nLeflabel+nWidLabel+8
		endwith
		with thisform
			.GMARCO1.TOP=.TEXT1.TOP
			.GMARCO1.WIDTH=.TEXT1.LEFT
			.cmAcepta.Enabled=iif(Empty(LcValor),.f.,.t.)
			.cmAcepta.left=.Text1.Left+.Text1.Width+2
			.Shape1.Width=.CmAcepta.Left+.CmAcepta.width+2
			.width=.shape1.left*2+.shape1.Width
			.Height=.Shape1.Top+.Shape1.Height+32
			.cmdClose1.Left=.width-28
			.cmdClose1.top=.Height-28
			.cmdClose1.visible=.t.
			.AutoCenter=.t.	
		endwith	
			
		
		
	ENDPROC

	PROCEDURE Load
		Thisform.AddProperty("Valoret","")
	ENDPROC

	PROCEDURE CmAcepta.Click
		_Screen.ThCadena=ALLTRIM(Thisform.Valoret)
		thisform.Release
		
		
		
	ENDPROC

	PROCEDURE CmAcepta.GotFocus
		thisform.gCalcu1.PutRaya(this)
	ENDPROC

	PROCEDURE CmAcepta.LostFocus
		thisform.gCalcu1.PutRaya()
	ENDPROC

	PROCEDURE Text1.GotFocus
		thisform.cmacepta.enabled=iif(!empty(this.value),.t.,.f.)
	ENDPROC

	PROCEDURE Text1.InteractiveChange
		Thisform.CmAcepta.Enabled=iif(Empty(this.value),.f.,.t.)
	ENDPROC

	PROCEDURE Text1.Valid
		this.value=alltrim(this.value)
		
			
	ENDPROC

ENDDEFINE

DEFINE CLASS telimpor AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmAcepta" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gmarco1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: vericuit
	*</DefinedPropArrayMethod>

	BackColor = 184,201,197
	Caption = "Telimpor"
	Desktop = .T.
	DoCreate = .T.
	Height = 66
	Icon = ..\graphics\fibona5inv.ico
	Left = 0
	MaxButton = .F.
	MinButton = .F.
	Name = "telimpor"
	ShowTips = .T.
	ShowWindow = 1
	Top = 0
	vericuit = .F.
	Width = 293
	WindowType = 1

	ADD OBJECT 'CmAcepta' AS commandbutton WITH ;
		Caption = "", ;
		DisabledPicture = ..\graphics\flidere1n.bmp, ;
		Enabled = .T., ;
		Height = 24, ;
		Left = 156, ;
		Name = "CmAcepta", ;
		Picture = ..\graphics\flidere1.bmp, ;
		TabIndex = 2, ;
		ToolTipText = "Aceptar y Cerrar.", ;
		Top = 6, ;
		Width = 33
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'gmarco1' AS shape WITH ;
		BackColor = 231,237,234, ;
		BorderColor = 114,136,141, ;
		Height = 21, ;
		Left = 8, ;
		Name = "gmarco1", ;
		Top = 8, ;
		Width = 101
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 13, ;
		Name = "Label1", ;
		TabIndex = 4, ;
		Top = 12, ;
		Width = 34
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 221,226,222, ;
		Height = 32, ;
		Left = 3, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 3, ;
		Width = 229
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Text1' AS textbox WITH ;
		Alignment = 3, ;
		BorderColor = 114,136,141, ;
		DisabledBackColor = 242,247,243, ;
		DisabledForeColor = 0,0,0, ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 58, ;
		Name = "Text1", ;
		SpecialEffect = 1, ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 90
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Init
		PARAMETERS xcCaption,xcTexto,xnNumero,xnInt,xnDec
		local lcRoot
		lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
		thisform.NewObject("cmdClose1","cmdClose",lcRoot)
		thisform.NewObject("gCalcu1","gCalcu",lcRoot)
		IF VARTYPE(xnNumero)#"N"
			xnNumero=0
		ENDIF
		IF VARTYPE(xnInt)#"N".or.empty(xnInt)
			xnInt=12
		endif
		IF VARTYPE(xnDec)#"N"
			xnDec=2
		ENDIF
		IF VARTYPE(xcCaption)#"C".or.empty(xcCaption)
			xcCaption="Devolver Número"
		ENDIF
		IF VARTYPE(xcTexto)#"C".or.empty(xcTexto)
			xcTexto="Número"
		ENDIF
		
		
		ADDPROPERTY(_Screen,"ThImpor",0)
		
		LOCAL lcFormat,lcInputMask,lcValor,;
			lnMaxlen,lnWid,;
			lcTexto,lcCaption,xlOcultar
			
		STORE "" TO lcFormat,lcInputMask,lcValor
		STORE 0 TO lnMaxLen,lnWid
		Thisform.Valoret=xnNumero
		lcMasc=this.gCalcu1.detmask(xnInt,xnDec)
		lnWid=This.gCalcu1.wokupas(lcMasc+"99","Arial",8)
		With thisform.Text1
			.format="Z"
			.InputMask=lcMasc
			.Width=lnWid
		ENDWITH
		nWidLabel=This.gCalcu1.wokupas(xctexto)+2
		WITH thisform
			.Caption=" "+Proper(xcCaption)
			.label1.Width=nWidlabel
			.Label1.Caption=Proper(xcTexto)
			.Text1.ControlSource='Thisform.Valoret'
		endwith
			
		nLefLabel=Thisform.Label1.Left
		nTopLabel=Thisform.Label1.Top
		With thisform.Text1
			.Top=ntopLabel-3
			.Left=nLeflabel+nWidLabel+8
		endwith
		with thisform
			.GMARCO1.TOP=.TEXT1.TOP
			.GMARCO1.WIDTH=.TEXT1.LEFT
			.cmAcepta.Enabled=iif(Empty(LcValor),.f.,.t.)
			.cmAcepta.left=.Text1.Left+.Text1.Width+2
			.Shape1.Width=.CmAcepta.Left+.CmAcepta.width+2
			.width=.shape1.left*2+.shape1.Width
			.Height=.Shape1.Top+.Shape1.Height+32
			.cmdClose1.Left=.width-28
			.cmdClose1.top=.Height-28
			.cmdClose1.Visible=.t.
			.AutoCenter=.t.	
		endwith	
			
		
		
	ENDPROC

	PROCEDURE Load
		Thisform.AddProperty("Valoret","")
	ENDPROC

	PROCEDURE CmAcepta.Click
		_Screen.ThImpor=Thisform.Valoret
		thisform.Release
		
		
		
	ENDPROC

	PROCEDURE CmAcepta.GotFocus
		thisform.gCalcu1.putraya(this)
	ENDPROC

	PROCEDURE CmAcepta.LostFocus
		thisform.gCalcu1.putraya()
	ENDPROC

	PROCEDURE Text1.GotFocus
		thisform.cmacepta.enabled=iif(!empty(this.value),.t.,.f.)
	ENDPROC

	PROCEDURE Text1.InteractiveChange
		Thisform.CmAcepta.Enabled=iif(Empty(this.value),.f.,.t.)
	ENDPROC

ENDDEFINE

DEFINE CLASS txtcalc AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: onlostfocus
	*</DefinedPropArrayMethod>

	Alignment = 3
	BorderColor = 114,136,141
	DisabledBackColor = 242,247,243
	DisabledForeColor = 0,0,0
	FontSize = 8
	Format = "Z"
	Height = 22
	InputMask = "999,999,999.99"
	Name = "txtcalc"
	SpecialEffect = 1
	Value = 0
	Width = 80
	
	PROCEDURE Click
		IF EMPTY(this.Value)
			this.SelStart=0
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		IF !PEMSTATUS(thisform,"zMetodo",5)
			ADDPROPERTY(thisform,"zMetodo","")
		ENDIF
		IF !PEMSTATUS(thisform,"zCalcu1",5)
			ADDPROPERTY(thisform,"zCalcu1",null)
		ENDIF
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=43
			local lcRoot
			lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
			if vartype(_Screen.zCalcu1)="O"
				thisform.zCalcu1.release
			endif
			thisform.zCalcu1=NEWOBJECT("FrmZCalcu",lcRoot,"",1,thisform,this,;
				IIF(nShiftAltCtrl=1,.t.,.f.),thisform.zmetodo)
			IF VARTYPE(thisform.zCalcu1)="O"
				thisform.zCalcu1.Show()
			ENDIF
			NODEFAULT
		ENDIF
		* Thisform.zMetodo se crea en el init de esta clase
		* zMetodo puede contener varios métodos separados por comas
		* Thisform.zMetod="Sumar , Limpiar , Afectar "
		* Se ejecutarán en el orden de izquierda a derecha.
		* ----------------------------------------------------------
		* Thisform.zMetodo puede definirse en el Init del formulario
		* -----------------------------------------------------------
		* Si tiene varios métodos para asociar a distintos zText,
		* En cada GotFocus de zText:
		* Thisform.zMetodo="MiMetodoEspecial"
		* DODEFAULT()
		* --------------------------------------
	ENDPROC

	PROCEDURE LostFocus
		IF VARTYPE(thisform.zCalcu1)#"O"
			this.OnLostFocus()
		ENDIF
		*!*	-----------------------------------------------------------
		*!*	Si la calculadora auxiliar de objeto está abierta
		*!*	se debe evitar la ejecución de los comandos de
		*!*	LostFocus Event. Para ello se crea un método sustituto.
		*!*	A fin de lograr un correcto desempeño, el LostFocus Event
		*!*	debe estar siempre en DEFAULT, respetando su herencia
		
		*!*	OnLostFocus es un método sustituto de LostFocus
		*!*	Agregar en el método OnLostFocus,
		*!*	las sentencias que se necesita ejecutar
		*!*	cuando se produce LostFocus Event
		*!*	-----------------------------------------------------------
	ENDPROC

	PROCEDURE onlostfocus
	ENDPROC

ENDDEFINE

DEFINE CLASS ztext AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Alignment = 3
	BorderColor = 114,136,141
	DisabledBackColor = 242,247,243
	DisabledForeColor = 0,0,0
	FontSize = 8
	Format = "Z"
	Height = 22
	InputMask = "999,999,999.99"
	Name = "ztext"
	SpecialEffect = 1
	Value = 0
	Width = 80
	
	PROCEDURE Init
		IF !PEMSTATUS(thisform,"zMetodo",5)
			ADDPROPERTY(thisform,"zMetodo","")
		ENDIF
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=43
			local lcRoot
			lcRoot=iif(pemstatus(_Screen,"Classdir",5),LOCFILE(ADDBS(_Screen.ClassDir)+"thcalc.vcx"),"thcalc")
			RELEASE zCalcu
			PUBLIC zCalcu
			zCalcu=NEWOBJECT("FrmZCalcu",lcRoot,"",0,;
				thisform,this,;
				IIF(nShiftAltCtrl=1,.t.,.f.),;
				Thisform.zMetodo)
			IF VARTYPE(zCalcu)="O"
				zCalcu.Show()
			ENDIF
			NODEFAULT
		ENDIF
		* Thisform.zMetodo se crea en el init de esta clase
		* zMetodo puede contener varios métodos separados por comas
		* Thisform.zMetod="Sumar , Limpiar , Afectar "
		* Se ejecutarán en el orden de izquierda a derecha.
		* ----------------------------------------------------------
		* Thisform.zMetodo puede definirse en el Init del formulario
		* -----------------------------------------------------------
		* Si tiene varios métodos para asociar a distintos zText,
		* En cada GotFocus de zText:
		* Thisform.zMetodo="MiMetodoEspecial"
		* DODEFAULT()
		* --------------------------------------
	ENDPROC

ENDDEFINE
